// Fetch API Swoogo
// const eventId = 258452; // Main Event
const eventId = 256029; // Test Event
let qtyMap = {};
let priceMap = {};
let finalPriceMap = {};
let originalNameMap = {};
let regTypeIdMap = {};
let discount = 0;
let subtotal = 0;
let discountedSubtotal = subtotal - discount;
let total = 0;
let totalHST = 0;
let HST_PERCENT = 0.13;
let discountData = null;

function fetchAndDisplayEventDate(eventId, targetIds = []) {
    fetch(`https://checkout-beige.vercel.app/api/events?eventId=${eventId}`)
        .then(res => res.json())
        .then(data => {
            const startDate = moment.tz(data.start_date, "America/Toronto").hour(7).minute(30);
            const endDate = moment.tz(data.end_date, "America/Toronto").hour(17).minute(0);
            const startFormatted = startDate.format("dddd, MMMM D");
            const endFormatted = endDate.format("dddd, MMMM D");
            const year = startDate.format("YYYY");

            const finalText = `${startFormatted} & ${endFormatted}, ${year}`;

            targetIds.forEach(id => {
                const el = document.getElementById(id);
                if (el) el.textContent = finalText;
            });
        })
        .catch(error => {
            console.error('Error fetching event:', error);
        });
}

fetchAndDisplayEventDate(eventId, ['eventDate']);

function sanitizeName(name) {
    return name
        .replace(/\s+/g, '')
        .replace(/[^a-zA-Z0-9]/g, '')
        .replace(/(?:^\w|[A-Z]|\b\w|\s+)/g, (match, index) =>
            index === 0 ? match.toLowerCase() : match.toUpperCase()
        );
}

function changeQty(type, delta) {
    qtyMap[type] = Math.max(0, (qtyMap[type] || 0) + delta);
    document.getElementById(`${type}Qty`).textContent = qtyMap[type];
    updateSummary();
    updateStepperUI();
}

function updateSummary() {
    subtotal = 0;
    total = 0;
    totalHST = 0;
    let itemText = "";
    let hasItems = false;

    finalPriceMap = {};

    for (let type in qtyMap) {
        const qty = qtyMap[type];
        if (qty > 0) {
            hasItems = true;

            const price = priceMap[type];

            let finalPrice = price;

            if (discount > 0 && discountId) {
                const discountItem = discountData.find(item => item.id === discountId);

                if (discountItem) {
                    if (discountItem.type === "percentage" && discountItem.percentage_discount > 0) {
                        finalPrice = price - (price * discountItem.percentage_discount / 100);
                    }
                    else if (discountItem.type === "absolute" && discountItem.absolute_discount > 0) {
                        finalPrice = price - discountItem.absolute_discount;
                    }
                }
            }


            finalPriceMap[type] = finalPrice;

            const itemSubtotal = qty * finalPrice;
            const displayName = originalNameMap[type] || type;

            subtotal += itemSubtotal;

            itemText += `<span id="${type}ItemQty" class="float-start fw-semibold">${qty} x</span>
                         <span class="ms-1 fw-semibold" id="${type}ItemName">${toTitleCase(displayName)}</span>
                         <span id="${type}Price" class="float-end fw-semibold">CA$ ${itemSubtotal.toLocaleString("en-CA", { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span><br>`;
        }
    }

    discountedSubtotal = subtotal;
    totalHST = discountedSubtotal * HST_PERCENT;
    total = discountedSubtotal + totalHST;

    document.getElementById("summaryItem").innerHTML = itemText;
    document.getElementById("subtotal").innerText = "CA$ " + subtotal.toLocaleString("en-CA", { minimumFractionDigits: 2, maximumFractionDigits: 2 });
    document.getElementById("hst").innerText = "CA$ " + totalHST.toLocaleString("en-CA", { minimumFractionDigits: 2, maximumFractionDigits: 2 });
    document.getElementById("total").innerText = "CA$ " + total.toLocaleString("en-CA", { minimumFractionDigits: 2, maximumFractionDigits: 2 });

    document.getElementById("discount").innerText = discountCode;
    document.getElementById("btnNext").disabled = !hasItems;
}


function toTitleCase(str) {
    return str
        .replace(/([A-Z])/g, ' $1')
        .replace(/^./, function (str) { return str.toUpperCase(); });
}

fetch(`https://checkout-beige.vercel.app/api/reg-types?event_id=${eventId}`)
    .then(res => res.json())
    .then(data => {
        const ticketContainer = document.getElementById('ticket');
        showSpinner('ticket');

        setTimeout(() => {
            ticketContainer.innerHTML = '';
            priceMap = {};
            qtyMap = {};
            originalNameMap = {};
            regTypeIdMap = {};

            const ticketPrices = [1495, 1295];

            data.items.forEach((item, index) => {
                const originalName = item.name;
                const type = sanitizeName(originalName);
                const price = ticketPrices[index] || 0;

                priceMap[type] = price;
                originalNameMap[type] = originalName;
                regTypeIdMap[type] = item.id;

                const borderClass = index === 0 ? "" : "border-top";
                const html = `
                        <div class="d-flex justify-content-between align-items-center ${borderClass} pt-3 pb-3">
                            <div>
                                <strong>${originalName}</strong>
                                <div class="fw-semibold">CA$ ${price.toLocaleString('en-CA')}</div>
                                <small class="text-muted">${item.description || ''}</small>
                            </div>
                            <div class="qty-box">
                                <button class="btn btn-outline-secondary btn-qty me-2" onclick="changeQty('${type}', -1)">-</button>
                                <span id="${type}Qty">0</span>
                                <button class="btn btn-outline-secondary btn-qty ms-2" onclick="changeQty('${type}', 1)">+</button>
                            </div>
                        </div>
                    `;

                ticketContainer.insertAdjacentHTML('beforeend', html);
            });
            defaultPriceMap = { ...priceMap };

            hideSpinner('ticket');
        }, 1000);
    })
    .catch(error => {
        console.error('Error fetching data:', error);
        hideSpinner('ticket');
    });



function showSpinner(sectionId) {
    const section = document.getElementById(sectionId);

    const existingSpinner = section.querySelector('.spinner-container');
    if (existingSpinner) {
        existingSpinner.remove();
    }

    const spinnerContainer = document.createElement('div');
    spinnerContainer.classList.add('spinner-container');
    spinnerContainer.classList.add('text-center');
    spinnerContainer.innerHTML = `
        <div class="spinner-border text-black" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    `;

    section.appendChild(spinnerContainer);
}

function hideSpinner(sectionId) {
    const section = document.getElementById(sectionId);
    const spinnerContainer = section.querySelector('.spinner-container');
    if (spinnerContainer) {
        spinnerContainer.remove();
    }
}

fetch(`https://checkout-beige.vercel.app/api/discounts?event_id=${eventId}`)
    .then(res => res.json())
    .then(data => {
        discountData = data.items;
    });


let discountCode = '';
let discountId = '';

function applyDiscountCode() {
    discountCode = document.getElementById("discountCode").value.trim();
    const discountItem = discountData.find(item => item.code === discountCode);

    Object.keys(originalNameMap).forEach(type => {
        priceMap[type] = defaultPriceMap[type];
    });

    subtotal = calculateSubtotal();
    discount = 0;
    discountId = null;

    if (!discountItem) {
        iziToast.error({
            title: 'Error',
            message: 'Invalid discount code.',
            position: 'topCenter',
            class: 'custom-toast'
        });
        updateSummary();
        return;
    }

    discountId = discountItem.id;

    if (discountItem.type === "percentage" && discountItem.percentage_discount > 0) {
        discount = (subtotal * discountItem.percentage_discount) / 100;
        iziToast.success({
            title: 'Success',
            message: `Discount applied! (${discountItem.percentage_discount}% off)`,
            position: 'topCenter',
            class: 'custom-toast'
        });

    } else if (
        (discountItem.type === "specific" || discountItem.type === "absolute") &&
        discountItem.absolute_discount > 0
    ) {
        discount = discountItem.absolute_discount;
        iziToast.success({
            title: 'Success',
            message: `Discount applied! (CA$ ${discountItem.absolute_discount} off)`,
            position: 'topCenter',
            class: 'custom-toast'
        });

    } else if (discountItem.custom_fees?.reg_type) {
        const customFees = discountItem.custom_fees.reg_type;
        let appliedFeesCount = 0;

        Object.entries(customFees).forEach(([regTypeId, feeStr]) => {
            const fee = parseFloat(feeStr);
            if (!isNaN(fee)) {
                const type = Object.keys(regTypeIdMap).find(t => regTypeIdMap[t] == regTypeId);
                if (type) {
                    priceMap[type] = fee;
                    appliedFeesCount++;
                }
            }
        });

        if (appliedFeesCount > 0) {
            iziToast.success({
                title: 'Success',
                message: `Custom pricing applied to ${appliedFeesCount} ticket type${appliedFeesCount > 1 ? 's' : ''}.`,
                position: 'topCenter',
                class: 'custom-toast'
            });
        } else {
            iziToast.warning({
                title: 'Notice',
                message: 'Discount code applied, but no valid custom fee found.',
                position: 'topCenter',
                class: 'custom-toast'
            });
        }

        subtotal = calculateSubtotal();
        discount = 0;

    } else {
        iziToast.warning({
            title: 'Notice',
            message: 'Discount code applied, but no discount value detected.',
            position: 'topCenter',
            class: 'custom-toast'
        });
    }

    updateSummary();
}


document.getElementById("applyDiscount").addEventListener("click", applyDiscountCode);
updateSummary();

function calculateSubtotal() {
    let subtotal = 0;
    Object.keys(priceMap).forEach(type => {
        const qty = qtyMap[type] || 0;
        const price = priceMap[type] || 0;
        subtotal += qty * price;
    });
    return subtotal;
}

// Stepper
document.addEventListener('DOMContentLoaded', function () {
  const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
  tooltipTriggerList.forEach(function (tooltipTriggerEl) {
    new bootstrap.Tooltip(tooltipTriggerEl);
  });
});

const tooltipTrigger = bootstrap.Tooltip.getInstance(document.querySelector('[data-bs-toggle="tooltip"]'));
let currentStep = 0;
const steps = ["ticket", "payment", "confirmation"];

function updateStepperUI() {
    const discountInput = document.getElementById('discountCode');
    const applyDiscountButton = document.getElementById('applyDiscount');
    const tooltipTarget = document.querySelector('[data-bs-toggle="tooltip"]');

    steps.forEach((step, index) => {
        const stepLabel = document.getElementById(`step-${step}`);
        if (stepLabel) {
            stepLabel.classList.remove("fw-bold", "text-muted");
            stepLabel.classList.add(index === currentStep ? "fw-bold" : "text-muted");
        }
    });

    steps.forEach((step, index) => {
        const section = document.getElementById(step);
        if (section) {
            section.classList.toggle("d-none", index !== currentStep);
        }
    });

    document.getElementById("btnPrev").disabled = currentStep === 0;

    if (steps[currentStep] === "payment") {
        document.getElementById("btnNext").classList.add("d-none");
        document.getElementById("submit-payment").classList.remove("d-none");
        discountInput.disabled = false;
        applyDiscountButton.disabled = false;

        if (tooltipTarget) {
            const tooltipInstance = bootstrap.Tooltip.getInstance(tooltipTarget);
            if (tooltipInstance) {
                tooltipInstance.dispose();
            }
            tooltipTarget.removeAttribute('title');
        }
    } else if (steps[currentStep] === "confirmation") {
        document.getElementById("summary-container").classList.add("d-none");
        document.getElementById("confirmation-container").classList.remove("d-none");
        document.getElementById("btnPrev").classList.add("d-none");
        document.getElementById("submit-payment").classList.add("d-none");
    } else {
        document.getElementById("btnNext").classList.remove("d-none");
        document.getElementById("submit-payment").classList.add("d-none");
        discountInput.disabled = true;
        applyDiscountButton.disabled = true;

        if (tooltipTarget && !tooltipTarget.getAttribute('title')) {
            tooltipTarget.setAttribute("title", "You can apply a discount code after the next step.");
            new bootstrap.Tooltip(tooltipTarget);
        }
    }

    if (steps[currentStep] === "payment") {
        generateForms();
    }
}


document.getElementById("btnNext").addEventListener("click", function () {
    if (currentStep < steps.length - 1) {
        currentStep++;
        updateStepperUI();
    }
});

document.getElementById("btnPrev").addEventListener("click", function () {
    if (currentStep > 0) {
        currentStep--;
        updateStepperUI();
    }
});

updateStepperUI();

// Generate Forms
// const stripe = Stripe("pk_live_OBbTMSsQKWiQ8qHPw20pMWX900344qOGfZ"); // Main Stripe
const stripe = Stripe("pk_test_51RGDkZRpq1SVqHLK8USIeHolf7LDSzQaCBHaAvXytorU0V7QxcSdSEuxNUU7ctz7kHaTONiVLMGKtgXqAzalZ2yY00gH055a8E"); // Test Stripe

function generateForms() {
    const payment = document.getElementById("payment");
    payment.innerHTML = "";

    showSpinner('payment');

    const requiredLabel = (text) =>
        `<label class="form-label required">${text} <span class="text-danger">*</span></label>`;

    const formHTML = `
  <form id="payment-form" action="/process-payment" method="POST">
    <div id="payment-sections" class="scroll-area">
`;

    let formContent = "";

    fetch(`https://checkout-beige.vercel.app/api/reg-types?event_id=${eventId}`)
        .then(response => response.json())
        .then(data => {
            if (data.items && Array.isArray(data.items)) {
                Object.keys(qtyMap).forEach(type => {
                    const qty = qtyMap[type];
                    for (let i = 1; i <= qty; i++) {
                        const sanitizedType = sanitizeName(type);

                        const items = data.items.filter(item => {
                            const sanitizedItemName = sanitizeName(item.name.trim());
                            const sanitizedType = sanitizeName(type);

                            return sanitizedItemName === sanitizedType;
                        });

                        if (items.length > 0) {
                            items.forEach(item => {
                                formContent += `
                                <div class="form-section mt-4">
                                    <div class="d-flex justify-content-between align-items-center mb-3">
                                        <h5 class="mb-0">${item.name} #${i}</h5>
                                        <button class="btn btn-sm toggle-form" type="button" data-bs-target="#${sanitizeName(sanitizedType)}Form${i}">
                                            <span class="icon-label">
                                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-chevron-up" viewBox="0 0 16 16">
                                                    <path fill-rule="evenodd" d="M1.646 10.854a.5.5 0 0 0 .708 0L8 5.207l5.646 5.647a.5.5 0 0 0 .708-.708l-6-6a.5.5 0 0 0-.708 0l-6 6a.5.5 0 0 0 0 .708z" />
                                                </svg>
                                            </span>
                                        </button>
                                    </div>
                                    <div class="collapse show" id="${sanitizeName(sanitizedType)}Form${i}">
                                        <input type="hidden" name="regType_${sanitizeName(sanitizedType)}_${i}" value="${item.id}">
                                        <div class="row mb-3">
                                            <div class="col-md-6 mb-3 mb-md-0">
                                                ${requiredLabel("First Name")}
                                                <input type="text" name="firstName_${sanitizeName(sanitizedType)}_${i}" class="form-control" required>
                                            </div>
                                            <div class="col-md-6">
                                                ${requiredLabel("Last Name")}
                                                <input type="text" name="lastName_${sanitizeName(sanitizedType)}_${i}" class="form-control" required>
                                            </div>
                                        </div>

                                        <div class="mb-3">
                                            ${requiredLabel("Email")}
                                            <input type="email" name="email_${sanitizeName(sanitizedType)}_${i}" class="form-control" required>
                                        </div>

                                        <div class="mb-3">
                                            ${requiredLabel("Company Name")}
                                            <input type="text" name="company_${sanitizeName(sanitizedType)}_${i}" class="form-control" required>
                                        </div>

                                        <div class="mb-3">
                                            ${requiredLabel("Job Title")}
                                            <input type="text" name="jobTitle_${sanitizeName(sanitizedType)}_${i}" class="form-control" required>
                                        </div>

                                        <div class="row mb-3">
                                            <div class="col-md-6 mb-3 mb-md-0">
                                                ${requiredLabel("Country")}
                                                <select class="form-control select-country" data-index="${i}" data-type="${sanitizeName(sanitizedType)}" name="country_${sanitizeName(sanitizedType)}_${i}" required>
                                                    <option value="">Select Country</option>
                                                </select>
                                            </div>
                                            <div class="col-md-6">
                                                ${requiredLabel("State/Province")}
                                                <select class="form-control select-state" data-index="${i}" data-type="${sanitizeName(sanitizedType)}" name="state_${sanitizeName(sanitizedType)}_${i}" required>
                                                    <option value="">Select State</option>
                                                </select>
                                            </div>
                                        </div>

                                        <div class="mb-3">
                                            ${requiredLabel("Work Phone")}
                                            <div class="input-group phone-input-group">
                                                <select name="phoneCode_${sanitizeName(sanitizedType)}_${i}" class="country-select" required>
                                                </select>
                                                <input type="tel" name="phoneNumber_${sanitizeName(sanitizedType)}_${i}" class="form-control phone-number-input" required>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            `;
                            });
                        }
                    }
                });

                payment.innerHTML = formHTML + formContent + `
                    <div class="form-section mt-4">
                        <div class="d-flex justify-content-between align-items-center mb-3">
                            <h5 class="mb-0">Payment Method</h5>
                            <img src="/assets/stripe.svg" alt="Stripe Logo" class="mt-2" style="height: 30px;">
                        </div>
                        <div id="stripe-payment-form">
                            <div class="mt-4 mb-3">
                                <h6 class="form-label">Card Details</h6>
                            </div>
                            <div class="mb-3">
                                <label for="email-payment" class="form-label">Email</label>
                                <input type="email-payment" id="email-payment" class="form-control" required>
                            </div>

                            <div class="mb-3">
                                <label for="card-element" class="form-label">Card Information</label>
                                <div id="card-element" class="form-control p-3"></div>
                                <div id="card-errors" role="alert"></div>
                            </div>

                            <div class="mb-3">
                                <label for="name-on-card" class="form-label">Name on Card</label>
                                <input type="text" id="name-on-card" class="form-control" required>
                            </div>

                            <div class="mt-4 mb-3">
                                <h6 class="form-label">Billing Address</h6>
                            </div>
                            <div class="row">
                                <div class="col-md-6 mb-3">
                                    <label for="billing-address-line1" class="form-label">Address Line 1</label>
                                    <input type="text" id="billing-address-line1" class="form-control" required>
                                </div>
                                <div class="col-md-6 mb-3">
                                    <label for="billing-city" class="form-label">City</label>
                                    <input type="text" id="billing-city" class="form-control" required>
                                </div>
                            </div>

                            <div class="row">
                                <div class="col-md-6 mb-3">
                                    <label for="billing-country" class="form-label">Country</label>
                                    <select id="billing-country" class="form-control" required>
                                        <option value="">Select Country</option>
                                    </select>
                                </div>
                                <div class="col-md-6 mb-3">
                                    <label for="billing-postal-code" class="form-label">Postal Code</label>
                                    <input type="text" id="billing-postal-code" class="form-control" required>
                                </div>
                            </div>
                        </div>
                    </div>
                </form>
                </div>`;

                document.querySelectorAll(".toggle-form").forEach((btn) => {
                    btn.addEventListener("click", function () {
                        const targetSelector = btn.getAttribute("data-bs-target");
                        const target = document.querySelector(targetSelector);
                        const iconLabel = btn.querySelector(".icon-label");

                        if (!target) {
                            console.error("Target not found:", targetSelector);
                            return;
                        }

                        const bsCollapse =
                            bootstrap.Collapse.getInstance(target) ||
                            new bootstrap.Collapse(target, { toggle: false });

                        const isShown = target.classList.contains("show");

                        if (isShown) {
                            bsCollapse.hide();
                            iconLabel.innerHTML = `
                      <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor"
                        class="bi bi-chevron-down" viewBox="0 0 16 16">
                        <path fill-rule="evenodd"
                          d="M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z"/>
                      </svg>
                    `;
                        } else {
                            bsCollapse.show();
                            iconLabel.innerHTML = `
                      <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor"
                        class="bi bi-chevron-up" viewBox="0 0 16 16">
                        <path fill-rule="evenodd"
                          d="M1.646 10.854a.5.5 0 0 0 .708 0L8 5.207l5.646 5.647a.5.5 0 0 0 .708-.708l-6-6a.5.5 0 0 0-.708 0l-6 6a.5.5 0 0 0 0 .708z"/>
                      </svg>
                    `;
                        }
                    });
                });

                fetch('country-phone.json')
                    .then(res => res.json())
                    .then(countryData => {
                        const defaultFlag = 'https://upload.wikimedia.org/wikipedia/commons/b/b0/No_flag.svg';

                        $('.country-select').each(function () {
                            const $select = $(this);

                            const $placeholderOption = new Option('Select Country', '', true, true);
                            $($placeholderOption)
                                .attr('data-flag', defaultFlag)
                                .attr('data-country', 'Select Country')
                                .attr('disabled', 'disabled')
                                .attr('hidden', 'hidden');
                            $select.append($placeholderOption);

                            Object.keys(countryData).forEach(code => {
                                const c = countryData[code];
                                const $option = new Option(`${c.name} (${c.phone[0]})`, c.phone[0], false, false);
                                $($option)
                                    .attr('data-flag', c.image)
                                    .attr('data-country', c.name);
                                $select.append($option);
                            });

                            $select.find('option').each(function () {
                                if ($(this).data('country') === 'Canada') {
                                    $(this).prop('selected', true);
                                    return false;
                                }
                            });

                            $select.select2({
                                templateResult: formatFlag,
                                templateSelection: formatFlag,
                                placeholder: 'Select Country',
                                width: '100%'
                            });

                            $select.trigger('change');
                        });

                        function formatFlag(opt) {
                            const isPlaceholder = !opt.id;
                            const flag = $(opt.element).data('flag') || (isPlaceholder ? defaultFlag : '');
                            const country = $(opt.element).data('country') || (isPlaceholder ? 'Select Country' : 'Unknown');
                            const phone = opt.id || '';

                            if (isPlaceholder) {
                                return $(`<span><img src="${flag}" class="option-flag-placeholder me-1"> </span>`);
                            }

                            if ($(opt.element).is(':selected') && !opt.element.disabled) {
                                return $(`<span><img src="${flag}" class="option-flag me-1"> </span>`);
                            }

                            return $(`<span><img src="${flag}" class="option-flag me-1"> ${country} (${phone})</span>`);
                        }

                    })
                    .catch(err => {
                        console.error('Failed to load country data:', err);
                        $('.country-select').html('<option value="">Failed to load countries</option>');
                    });


                fetch('country.json')
                    .then(response => {
                        if (!response.ok) throw new Error('Network response was not ok');
                        return response.json();
                    })
                    .then(data => {
                        if (Array.isArray(data)) {
                            const selects = document.querySelectorAll('.select-country');
                            selects.forEach(select => {
                                data.forEach(option => {
                                    const opt = document.createElement('option');
                                    opt.value = option.value;
                                    opt.textContent = option.label;
                                    select.appendChild(opt.cloneNode(true)); // cloneNode to avoid shared node reference
                                });
                            });
                        } else {
                            console.error('Data is not an array:', data);
                        }
                    })
                    .catch(error => {
                        console.error('Error fetching country data:', error);
                    });

                fetch('state.json')
                    .then(response => {
                        if (!response.ok) throw new Error('Network response was not ok');
                        return response.json();
                    })
                    .then(data => {
                        const selects = document.querySelectorAll('.select-state');
                        selects.forEach(select => {
                            data.forEach(option => {
                                const opt = document.createElement('option');
                                opt.value = option.value;
                                opt.textContent = option.label;
                                select.appendChild(opt.cloneNode(true));
                            });
                        });
                    })
                    .catch(error => {
                        console.error('Error fetching state data:', error);
                    });

                fetch('https://raw.githubusercontent.com/khkwan0/countryCityStateJson/refs/heads/master/src/country-state-city/lib/country.json')
                    .then(response => {
                        if (!response.ok) throw new Error('Network response was not ok');
                        return response.json();
                    })
                    .then(countries => {
                        const billingCountry = document.getElementById('billing-country');

                        if (billingCountry && billingCountry.options.length <= 1) {
                            countries.forEach(country => {
                                const option = document.createElement('option');
                                option.value = country.sortname;
                                option.dataset.id = country.id;
                                option.textContent = country.name;
                                billingCountry.appendChild(option);
                            });
                        }

                        // document.querySelectorAll('.select-state').forEach(stateSelect => {
                        //     stateSelect.disabled = true;
                        // });

                        // document.querySelectorAll('.select-country').forEach(selectEl => {
                        //     if (selectEl.options.length <= 1) {
                        //         countries.forEach(country => {
                        //             const option = document.createElement('option');
                        //             option.value = country.sortname;
                        //             option.dataset.id = country.id;
                        //             option.textContent = country.name;
                        //             selectEl.appendChild(option);
                        //         });
                        //     }

                        //     selectEl.addEventListener('change', function () {
                        //         const selectedCountryId = this.selectedOptions[0]?.dataset.id;
                        //         const index = this.dataset.index;
                        //         const type = this.dataset.type;
                        //         const stateSelect = document.querySelector(`.select-state[data-index="${index}"][data-type="${type}"]`);

                        //         stateSelect.disabled = true;
                        //         stateSelect.innerHTML = '<option value="">Select State</option>';

                        //         if (selectedCountryId) {
                        //             fetch('https://raw.githubusercontent.com/khkwan0/countryCityStateJson/refs/heads/master/src/country-state-city/lib/state.json')
                        //                 .then(response => response.json())
                        //                 .then(states => {
                        //                     const filteredStates = states.filter(state => state.country_id === selectedCountryId);
                        //                     filteredStates.forEach(state => {
                        //                         const option = document.createElement('option');
                        //                         option.value = state.name;
                        //                         option.textContent = state.name;
                        //                         stateSelect.appendChild(option);
                        //                     });

                        //                     stateSelect.disabled = false;
                        //                 })
                        //                 .catch(error => {
                        //                     console.error('Error fetching state data:', error);
                        //                 });
                        //         }
                        //     });
                        // });
                    })
                    .catch(error => console.error('Error fetching country data:', error));



                // Stripe Integration
                const elements = stripe.elements();

                const card = elements.create("card");
                card.mount("#card-element");

                const form = document.getElementById("payment");
                const submitButton = document.getElementById("submit-payment");
                const cardErrors = document.getElementById("card-errors");

                submitButton.addEventListener("click", function (event) {
                        event.preventDefault();

                        let formValid = true;

                        const phoneGroups = form.querySelectorAll(".phone-input-group");
                        phoneGroups.forEach(function (group) {
                            const countrySelect = group.querySelector(".country-select[required]");
                            const phoneInput = group.querySelector(".phone-number-input[required]");
                            const existingError = group.parentNode.querySelector(".error-message");

                            if (existingError) {
                                existingError.remove();
                            }

                            let errorMessage = "";
                            const countrySelectEmpty = countrySelect && !countrySelect.value;
                            const phoneInputEmpty = phoneInput && !phoneInput.value.trim();

                            if (countrySelectEmpty && phoneInputEmpty) {
                                errorMessage = "*Please select a country code and enter a phone number*";
                                formValid = false;
                            } else if (countrySelectEmpty) {
                                errorMessage = "*Please select a country code*";
                                formValid = false;
                            } else if (phoneInputEmpty) {
                                errorMessage = "*Please enter a phone number*";
                                formValid = false;
                            }

                            if (errorMessage) {
                                const errorText = document.createElement("span");
                                errorText.className = "error-message";
                                errorText.style.color = "#e74c3c";
                                errorText.style.fontSize = "12px";
                                errorText.style.marginLeft = "10px";
                                errorText.style.marginTop = "5px";
                                errorText.style.display = "block";
                                errorText.textContent = errorMessage;
                                group.parentNode.appendChild(errorText);
                            }
                        });

                        const otherControls = form.querySelectorAll(".form-control[required]:not(.phone-number-input), .state-select[required]");
                        otherControls.forEach(function (input) {
                            const errorMessage = input.nextElementSibling;
                            let errorText;

                            function getLabelText(input) {
                                let labelText = "This field";
                                const inputId = input.id;
                                let label;

                                if (inputId) {
                                    label = form.querySelector(`label[for="${inputId}"]`);
                                }

                                if (!label) {
                                    label = input.parentNode.querySelector("label") || input.previousElementSibling;
                                }

                                if (label) {
                                    labelText = label.textContent.trim().replace(/[:*]/g, "").toLowerCase();
                                }

                                return labelText;
                            }

                            if (input.tagName.toLowerCase() === "select") {
                                if (!input.value) {
                                    formValid = false;
                                    if (!errorMessage || !errorMessage.classList.contains("error-message")) {
                                        errorText = document.createElement("span");
                                        errorText.className = "error-message";
                                        errorText.style.color = "#e74c3c";
                                        errorText.style.fontSize = "12px";
                                        errorText.style.marginLeft = "10px";
                                        errorText.style.marginTop = "5px";

                                        const labelText = input.classList.contains("state-select")
                                            ? "state"
                                            : getLabelText(input);
                                        errorText.textContent = `*Please select a ${labelText}*`;

                                        input.parentNode.appendChild(errorText);
                                    }
                                } else {
                                    if (errorMessage && errorMessage.classList.contains("error-message")) {
                                        errorMessage.remove();
                                    }
                                }
                            } else {
                                if (!input.value.trim()) {
                                    formValid = false;
                                    if (!errorMessage || !errorMessage.classList.contains("error-message")) {
                                        errorText = document.createElement("span");
                                        errorText.className = "error-message";
                                        errorText.style.color = "#e74c3c";
                                        errorText.style.fontSize = "12px";
                                        errorText.style.marginLeft = "10px";
                                        errorText.style.marginTop = "5px";

                                        const labelText = getLabelText(input);
                                        errorText.textContent = `*Please enter your ${labelText}*`;

                                        input.parentNode.appendChild(errorText);
                                    }
                                } else {
                                    if (errorMessage && errorMessage.classList.contains("error-message")) {
                                        errorMessage.remove();
                                    }
                                }
                            }
                        });

                    if (!formValid) {
                        return;
                    }

                    stripe.createToken(card).then(function (result) {
                        if (result.error) {
                            cardErrors.textContent = '*' + result.error.message;

                        } else {
                            stripeTokenHandler(result.token);
                        }
                    });
                });
            }
        })
        .catch(error => {
            console.error('Error fetching data:', error);
        })
        .finally(() => {
            hideSpinner('payment');
        });

    function stripeTokenHandler(token) {
        const amountInCents = Math.round(total * 100);

        const emailPayment = document.getElementById("email-payment").value;
        const nameOnCard = document.getElementById("name-on-card").value;
        const billingAddressLine1 = document.getElementById("billing-address-line1").value;
        const billingCity = document.getElementById("billing-city").value;
        const billingCountry = document.getElementById("billing-country").value;
        const billingPostalCode = document.getElementById("billing-postal-code").value;


        const loading = showLoadingModal();

        // Function to process the registration and payment in one request
        const processRegistrationAndPayment = () => {
            return new Promise((resolve, reject) => {
                const form = document.getElementById('payment-form');
                const formData = new FormData(form);
                const formFields = {};

                formData.forEach((value, key) => {
                    formFields[key] = value;
                });

                function getParticipantsData(formFields) {
                    const participants = {};

                    const pattern = /^(firstName|lastName|email|company|jobTitle|country|state|phoneCode|phoneNumber|regType)_(\w+)_(\d+)$/;

                    Object.keys(formFields).forEach(fieldName => {
                        const matches = fieldName.match(pattern);

                        if (matches) {
                            const [_, field, ticketType, index] = matches;

                            if (!participants[ticketType]) {
                                participants[ticketType] = [];
                            }

                            if (!participants[ticketType][index - 1]) {
                                participants[ticketType][index - 1] = {
                                    firstName: '',
                                    lastName: '',
                                    email: '',
                                    company: '',
                                    jobTitle: '',
                                    country: '',
                                    state: '',
                                    phone: '',
                                    regType: '',
                                    price: 0,
                                    hst: 0,
                                };
                            }

                            if (field !== 'phoneCode' && field !== 'phoneNumber') {
                                participants[ticketType][index - 1][field] = formFields[fieldName];
                            }

                            if (field === 'regType') {
                                const regTypeInput = document.querySelector(`input[name="regType_${ticketType}_${index}"]`);
                                if (regTypeInput) {
                                    participants[ticketType][index - 1].regType = regTypeInput.value;
                                }
                            }
                        }
                    });

                    Object.keys(participants).forEach(ticketType => {
                        participants[ticketType].forEach((participant, i) => {
                            const index = i + 1;
                            const phoneCode = formFields[`phoneCode_${ticketType}_${index}`] || '';
                            const phoneNumber = formFields[`phoneNumber_${ticketType}_${index}`] || '';
                            participant.phone = `${phoneCode}${phoneNumber}`.trim();

                            participant.discount = discountCode ? String(discountCode) : null;
                            participant.price = finalPriceMap[ticketType] || 0;
                            const hstAmount = participant.price * HST_PERCENT;
                            participant.hst = hstAmount;
                        });
                    });

                    return participants;
                }

                const participants = getParticipantsData(formFields);

                if (participants.length === 0) {
                    reject(new Error("No valid participants found"));
                    return;
                }

                // Collect data for registration and payment
                const paymentData = {
                    token: token.id,
                    amount: amountInCents,
                    description: "Event Registration Big Data Canada",
                    email: emailPayment,
                    nameOnCard: nameOnCard,
                    billingAddressLine1: billingAddressLine1,
                    billingCity: billingCity,
                    billingCountry: billingCountry,
                    billingPostalCode: billingPostalCode,
                };

                const fieldMap = {
                    country: 'c_5970654',
                    state: 'c_5970655',
                };

                const requestData = {
                    ...paymentData,
                    participants: participants,
                    eventId: eventId,
                    fieldMap: fieldMap,
                };

                const summaryData = {
                    hst: totalHST,
                    total: total,
                    discount: discount,
                    discountCode: discountCode,
                    subtotal: subtotal,
                };

                fetch('https://checkout-beige.vercel.app/api/register-pay', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(requestData),
                })
                    .then(response => response.json())
                    .then(data => {
                        if (!data.success) {
                            let errorMsg = data.message || 'Payment or registration failed';

                            if (data.failedParticipants && Array.isArray(data.failedParticipants)) {
                                const details = data.failedParticipants
                                    .map(p => {
                                        if (p.failedParticipants && Array.isArray(p.failedParticipants)) {
                                            return p.failedParticipants
                                                .map(inner => {
                                                    if (inner.error && Array.isArray(inner.error)) {
                                                        return inner.error
                                                            .map(e => `${e.message}`)
                                                            .join(', ');
                                                    }
                                                    return '';
                                                })
                                                .join('<br>');
                                        }
                                        return '';
                                    })
                                    .join('<br>');

                                iziToast.error({
                                    title: 'Registration Error',
                                    message: details || 'Something went wrong.',
                                    position: 'topCenter',
                                    class: 'custom-toast',
                                });

                                return reject(data);
                            }

                        }

                        const uniqId = `payment_${Date.now()}_${Math.floor(Math.random() * 1000000)}`;
                        const now = new Date().getTime();
                        const expiryTime = now + 10 * 60 * 1000;

                        const storageData = {
                            participants: requestData.participants,
                            summary: summaryData,
                            payment: paymentData,
                            expiry: expiryTime,
                            uniqId: uniqId,
                            createdAt: new Date().toISOString()
                        };

                        localStorage.setItem(uniqId, JSON.stringify(storageData));
                        localStorage.setItem("latestPaymentId", uniqId);

                        resolve(data);
                    })
                    .catch(error => {
                        reject(error);
                    });
            });
        };

        // Execute the process
        processRegistrationAndPayment()
            .then(data => {
                if (data.success) {
                    hideLoadingModal(loading);
                    showPaymentStatus("Payment and registration successful!", true);

                    const nextStepIndex = steps.indexOf("confirmation");
                    if (nextStepIndex !== -1) {
                        currentStep = nextStepIndex;
                        updateStepperUI();
                        window.scrollTo(0, 0);

                        displayRegistrantData();
                    }
                } else {
                    hideLoadingModal(loading);
                    showPaymentStatus(data.message, false);
                }
            })
            .catch(error => {
                hideLoadingModal(loading);
                // showPaymentStatus("Payment or registration failed. Please try again.", false);
                // console.error(error);
            });

    }


    function showPaymentStatus(message, isSuccess) {
        iziToast.show({
            title: isSuccess ? 'Success' : 'Error',
            message: message,
            color: isSuccess ? 'green' : 'red',
            position: 'topCenter',
            timeout: 3000,
            transitionIn: 'fadeIn',
            transitionOut: 'fadeOut',
            class: 'custom-toast'
        });
    }

    function showLoadingModal() {
        const modal = new bootstrap.Modal(document.getElementById('loadingModal'));
        modal.show();
        return modal;
    }

    function hideLoadingModal(modalInstance) {
        modalInstance.hide();
    }
}

function formatTicketType(ticketType) {
    return ticketType
        .replace(/([a-z])([A-Z])/g, '$1 $2')
        .replace(/^./, str => str.toUpperCase());
}

function loadRegistrantData() {
    const paymentId = localStorage.getItem("latestPaymentId");
    const expirationTime = localStorage.getItem("registrationExpiration");
    const currentTime = Date.now();

    for (let i = 0; i < localStorage.length; i++) {
        const key = localStorage.key(i);
        if (
            key !== "latestPaymentId" &&
            key !== "registrationExpiration" &&
            key !== paymentId
        ) {
            localStorage.removeItem(key);
            i--;
        }
    }

    if (!paymentId || (expirationTime && currentTime > Number(expirationTime))) {
        localStorage.removeItem("registrationExpiration");
        if (paymentId) {
            localStorage.removeItem(paymentId);
        }
        localStorage.removeItem("latestPaymentId");
        return null;
    }

    const paymentDataRaw = localStorage.getItem(paymentId);
    if (!paymentDataRaw) {
        return null;
    }

    try {
        return JSON.parse(paymentDataRaw);
    } catch (e) {
        console.error("Invalid JSON in localStorage for paymentId:", paymentId);
        return null;
    }
}


function displayRegistrantData() {
    const data = loadRegistrantData();
    if (!data) {
        console.log("No registration data found or data has expired.");
        return;
    }

    document.getElementById("confirmation").classList.remove("d-none");

    let allParticipants = [];
    for (const [ticketType, participantList] of Object.entries(data.participants)) {
        participantList.forEach(participant => {
            allParticipants.push({ ...participant, ticketType });
        });
    }
    const summary = data.summary;

    document.getElementById("eventDate").classList.add("d-none");
    fetchAndDisplayEventDate(eventId, ['eventDateConfirmed']);
    document.getElementById("formTitleText").textContent = "Registration Confirmed";
    document.getElementById("confirmationIcon").classList.remove("d-none");

    const registrantTbody = document.querySelector("#registrantTable tbody");
    registrantTbody.innerHTML = "";

    allParticipants.forEach(participant => {
        const row = document.createElement("tr");
        const price = participant.price;
        const hst = participant.hst || price * HST_PERCENT;
        const subtotal = price + hst;

        row.innerHTML = `
            <td>${participant.firstName} ${participant.lastName}</td>
            <td>${formatTicketType(participant.ticketType)}</td>
            <td>CA$ ${(participant.price).toLocaleString('en-CA', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</td>
            <td>CA$ ${(participant.hst).toLocaleString('en-CA', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</td>
            <td class="text-end">CA$ ${subtotal.toLocaleString('en-CA', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</td>
        `;
        registrantTbody.appendChild(row);
    });

    document.querySelector("#registrantTable tfoot").innerHTML = `
    <tr>
        <td colspan="5">
            <div class="d-flex justify-content-between">
                <strong>Discount</strong>
                <strong>${summary.discountCode}</strong>
            </div>
        </td>
    </tr>
    <tr>
        <td colspan="5" style="border-top: 0.5px solid #969696">
            <div class="d-flex justify-content-between">
                <strong>Total</strong>
                <strong>CA$ ${summary.total.toLocaleString('en-CA', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</strong>
            </div>
        </td>
    </tr>`;

    const createdAtDate = new Date(data.createdAt);
    const formattedDate = createdAtDate.toLocaleDateString('en-US', {
        month: 'numeric',
        day: 'numeric',
        year: '2-digit',
        hour: 'numeric',
        minute: 'numeric',
        hour12: true
    });
    const transactionTbody = document.querySelector("#transactionTable tbody");
    transactionTbody.innerHTML = `
        <tr>
            <td>${formattedDate}</td>
            <td>Order Amount</td>
            <td class="text-end">CA$ ${summary.total.toLocaleString('en-CA', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</td>
        </tr>
        <tr>
            <td>${formattedDate}</td>
            <td>Credit Card</td>
            <td class="text-end">-CA$ ${summary.total.toLocaleString('en-CA', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</td>
        </tr>
    `;

    document.getElementById("balanceDue").textContent = 'CA$ 0.00';

}

// Datatable
$(document).ready(function () {
    $('#registrantTable').DataTable({
        ordering: false
    });

    $('#transactionTable').DataTable({
        ordering: false
    });
});


document.getElementById('btnDownload').addEventListener('click', async () => {
    const loading = showLoadingInvoiceModal();

    const data = loadRegistrantData();

    if (!data) {
        alert("No payment data found.");
        return;
    }

    const participantsObj = data.participants || {};
    const summary = data.summary || {};
    const payment = data.payment || {};
    const createdAtDate = new Date(data.createdAt || new Date());
    const formattedDate = createdAtDate.toLocaleDateString('en-US', {
        month: 'numeric',
        day: 'numeric',
        year: '2-digit',
        hour: 'numeric',
        minute: 'numeric',
        hour12: true
    });

    const participants = Object.entries(participantsObj).flatMap(([ticketType, list]) =>
        list.map(p => ({ ...p, ticketType }))
    );


    const participantRows = participants.map(participant => `
        <tr>
            <td>${participant.firstName} ${participant.lastName}</td>
            <td>${formatTicketType(participant.ticketType)}</td>
            <td>CA$ ${(participant.price).toLocaleString('en-CA')}</td>
            <td>CA$ ${(summary.hst / participants.length).toLocaleString('en-CA')}</td>
            <td class="text-end">CA$ ${((summary.total - summary.discount) / participants.length).toLocaleString('en-CA')}</td>
        </tr>
    `).join('');

    const transactionRow = `
        <tr>
            <td>${formattedDate}</td>
            <td>Order Amount</td>
            <td class="text-end">CA$ ${summary.total.toLocaleString('en-CA')}</td>
        </tr>
        <tr>
            <td>${formattedDate}</td>
            <td>Credit Card</td>
            <td class="text-end">-CA$ ${summary.total.toLocaleString('en-CA')}</td>
        </tr>
    `;

    const htmlContent = `
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8" />
            <meta name="viewport" content="width=device-width, initial-scale=1.0" />
            <title>Invoice</title>
            <link
            href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css"
            rel="stylesheet"
            />
            <style>
            body {
                font-family: "Segoe UI", sans-serif;
                padding: 40px;
                box-shadow: none;
            }
            .invoice-header {
                border-bottom: 2px solid #dee2e6;
                padding-bottom: 20px;
                margin-bottom: 30px;
            }
            .invoice-title {
                font-size: 24px;
                font-weight: bold;
            }
            .invoice-logo img {
                max-height: 60px;
            }
            #registrantTable thead th {
                font-weight: 500;
                border-bottom: none;
            }
            #transactionTable thead th {
                font-weight: 500;
                text-align: left;
                padding: 12px 8px;
                border-bottom: 1px solid #ddd;
            }
            #transactionTable tbody td {
                padding: 12px 8px;
            }
            #transactionTable .text-end {
                text-align: right;
            }

            table {
                font-size: 13px !important;
            }

            table th,
            table td {
                font-size: 13px !important;
            }
            </style>
        </head>
        <body>
            <div class="container">
            <div class="row invoice-header align-items-center">
                <div class="col-md-6 invoice-title">INVOICE</div>
                <div class="col-md-6 text-end invoice-logo">
                <img src="https://register.bigdatacanada.ca/assets/logo-black.webp" alt="Company Logo" />
                </div>
            </div>

            <div class="row mb-4">
                <div class="col-md-6">
                <p><strong>Invoice Date:</strong><br /> 
                    ${formattedDate}</p>
                </div>
                <div class="col-md-6 text-end">
                <p>
                    <strong>Billed To:</strong><br />
                    ${payment.nameOnCard}<br />
                    ${payment.email}<br />
                </p>
                </div>
            </div>

            <h5 class="mb-3">Registrant Details</h5>
            <div class="table-responsive">
                <table
                id="registrantTable"
                class="table table-bordered table-striped"
                style="width: 100%"
                >
                <thead>
                    <tr>
                    <th>Registrant Name</th>
                    <th>Ticket Type</th>
                    <th>Unit Price</th>
                    <th>HST</th>
                    <th class="text-end">Subtotal</th>
                    </tr>
                </thead>
                <tbody>${participantRows}</tbody>
                <tfoot>
                    <tr>
                        <td colspan="5">
                            <div class="d-flex justify-content-between">
                                <strong>Discount Code</strong>
                                <strong>${summary.discountCode}</strong>
                            </div>
                        </td>
                    </tr>
                    <tr>
                        <td colspan="5" style="border-top: 0.5px solid rgb(212, 212, 212)">
                            <div class="d-flex justify-content-between">
                                <strong>Total</strong>
                                <strong>CA$ ${summary.total.toLocaleString('en-CA')}</strong>
                            </div>
                        </td>
                    </tr>
                </tfoot>
                </table>
            </div>

            <h5 class="mt-2 mb-3">Transaction Summary</h5>
            <div class="table-responsive">
                <table id="transactionTable" class="table table-bordered table-striped w-100">
                <thead>
                    <tr>
                    <th>Date</th>
                    <th>Transaction Type</th>
                    <th class="text-end">Amount</th>
                    </tr>
                </thead>
                <tbody>${transactionRow}</tbody>
                <tfoot>
                    <tr>
                    <td colspan="3">
                        <div class="d-flex justify-content-between">
                        <strong>Balance Due</strong>
                        <strong id="balanceDue">CA$ 0.00</strong>
                        </div>
                    </td>
                    </tr>
                </tfoot>
                </table>
            </div>
            </div>
        </body>
        </html>

    `;

    const fullName = `${participants[0].firstName}_${participants[0].lastName}`;
    const uniqId = data.uniqId || 'invoice';
    const fileName = `invoice_${fullName}_${uniqId}.pdf`;

    const response = await fetch('https://checkout-beige.vercel.app/api/generate-invoice', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({ htmlContent, fileName })
    });

    const isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;
    const isAndroid = /Android/i.test(navigator.userAgent);
    const isMobile = isIOS || isAndroid || window.innerWidth <= 768;

    hideLoadingInvoiceModal(loading);

    if (response.ok) {
        const pdfBlob = await response.blob();

        if (pdfBlob.type === 'application/pdf') {
            if (isIOS) {
                const pdfURL = URL.createObjectURL(pdfBlob);
                window.location.href = pdfURL;
                iziToast.success({
                    title: 'Success',
                    message: 'Invoice opened. Tap share or save to download.',
                    position: 'topCenter',
                    class: 'custom-toast',
                    timeout: 3000,
                });
            } else if (isMobile) {
                const pdfURL = URL.createObjectURL(pdfBlob);
                const link = document.createElement('a');
                link.href = pdfURL;
                link.download = fileName;
                link.click();

                iziToast.success({
                    title: 'Success',
                    message: 'Invoice downloaded successfully!',
                    position: 'topCenter',
                    class: 'custom-toast',
                    timeout: 3000,
                });
            } else {
                const pdfURL = URL.createObjectURL(pdfBlob);
                window.open(pdfURL, '_blank');

                iziToast.success({
                    title: 'Success',
                    message: 'Invoice opened successfully!',
                    position: 'topCenter',
                    class: 'custom-toast',
                    timeout: 3000,
                });
            }
        } else {
            console.error('Response is not a valid Invoice');
            iziToast.error({
                title: 'Error',
                message: 'Failed to generate Invoice',
                position: 'topCenter',
                class: 'custom-toast',
                timeout: 3000,
            });
        }
    } else {
        console.error('Failed to generate Invoice');
        iziToast.error({
            title: 'Error',
            message: 'Failed to generate Invoice',
            position: 'topCenter',
            class: 'custom-toast',
            timeout: 3000,
        });
    }
});

document.getElementById('btnCalendar').addEventListener('click', async () => {
    const eventDetails = {
        title: "11th Annual Big Data & Analytics Summit Canada",
        description: "The 11th Annual Big Data & Analytics Summit Canada 2025 features big data and analytics experts from top North American brands.",
        location: "Sheraton Toronto Airport Hotel & Conference Centre",
        start: [2025, 6, 4, 7, 30],
        end: [2025, 6, 5, 17, 0]
    };

    const fileName = "BigData_Summit_Canada_2025";

    try {
        const response = await fetch('https://checkout-beige.vercel.app/api/add-to-calendar', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ eventDetails, fileName }),
        });

        if (!response.ok) {
            throw new Error('Failed to generate ICS file');
        }

        const blob = await response.blob();

        const url = window.URL.createObjectURL(blob);

        const link = document.createElement('a');
        link.href = url;
        link.download = fileName + '.ics';
        link.click();

        window.URL.revokeObjectURL(url);
    } catch (error) {
        console.error('Error:', error.message);
    }
});


function showLoadingInvoiceModal() {
    const modal = new bootstrap.Modal(document.getElementById('loadingInvoiceModal'));
    modal.show();
    return modal;
}

function hideLoadingInvoiceModal(modalInstance) {
    modalInstance.hide();
}