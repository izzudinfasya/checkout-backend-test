// Fetch API Swoogo
// const eventId = 258452; // Main Event
const eventId = 256029; // Test Event
// const stripe = Stripe("pk_live_OBbTMSsQKWiQ8qHPw20pMWX900344qOGfZ"); // Main Stripe
const stripe = Stripe("pk_test_51RGDkZRpq1SVqHLK8USIeHolf7LDSzQaCBHaAvXytorU0V7QxcSdSEuxNUU7ctz7kHaTONiVLMGKtgXqAzalZ2yY00gH055a8E"); // Test Stripe
let qtyMap = {};
let priceMap = {};
let finalPriceMap = {};
let originalNameMap = {};
let regTypeIdMap = {};
let discount = 0;
let subtotal = 0;
let discountedSubtotal = subtotal - discount;
let total = 0;
let totalHST = 0;
let HST_PERCENT = 0.13;
let discountData = [];
let discountCode = '';
let discountId = '';

function fetchAndDisplayEventDate(eventId, targetIds = []) {
    fetch(`https://checkout-beige.vercel.app/api/events?eventId=${eventId}`)
        .then(res => res.json())
        .then(data => {
            const startDate = moment.tz(data.start_date, "America/Toronto").hour(7).minute(30);
            const endDate = moment.tz(data.end_date, "America/Toronto").hour(17).minute(0);
            const startFormatted = startDate.format("dddd, MMMM D");
            const endFormatted = endDate.format("dddd, MMMM D");
            const year = startDate.format("YYYY");

            const finalText = `${startFormatted} & ${endFormatted}, ${year}`;

            targetIds.forEach(id => {
                const el = document.getElementById(id);
                if (el) el.textContent = finalText;
            });
        })
        .catch(error => {
            console.error('Error fetching event:', error);
        });
}

fetchAndDisplayEventDate(eventId, ['eventDate']);

function sanitizeName(name) {
    return name
        .replace(/\s+/g, '')
        .replace(/[^a-zA-Z0-9]/g, '')
        .replace(/(?:^\w|[A-Z]|\b\w|\s+)/g, (match, index) =>
            index === 0 ? match.toLowerCase() : match.toUpperCase()
        );
}

function toTitleCase(str) {
    return str
        .replace(/([A-Z])/g, ' $1')
        .replace(/^./, function (str) { return str.toUpperCase(); });
}

function showSpinner(sectionId) {
    const section = document.getElementById(sectionId);

    const existingSpinner = section.querySelector('.spinner-container');
    if (existingSpinner) {
        existingSpinner.remove();
    }

    const spinnerContainer = document.createElement('div');
    spinnerContainer.classList.add('spinner-container');
    spinnerContainer.classList.add('text-center');
    spinnerContainer.innerHTML = `
        <div class="spinner-border text-black" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    `;

    section.appendChild(spinnerContainer);
}

function hideSpinner(sectionId) {
    const section = document.getElementById(sectionId);
    const spinnerContainer = section.querySelector('.spinner-container');
    if (spinnerContainer) {
        spinnerContainer.remove();
    }
}

function changeQty(type, delta) {
    qtyMap[type] = Math.max(0, (qtyMap[type] || 0) + delta);
    document.getElementById(`${type}Qty`).textContent = qtyMap[type];

    // Save qtyMap and priceMap to localStorage
    localStorage.setItem('ticketQtyMap', JSON.stringify(qtyMap));
    localStorage.setItem('ticketPriceMap', JSON.stringify(priceMap));

    updateSummary();
    updateStepperUI();
}

fetch(`https://checkout-beige.vercel.app/api/discounts?event_id=${eventId}`)
    .then(res => res.json())
    .then(data => {
        discountData = data.items || [];
    })
    .catch(error => {
        console.error('Error fetching discounts:', error);
        discountData = [];
        iziToast.error({
            title: 'Error',
            message: 'Failed to load discount data.',
            position: 'topCenter',
            class: 'custom-toast'
        });
    });

function applyDiscountCode() {
    if (!discountData) {
        iziToast.error({
            title: 'Error',
            message: 'Discount data not loaded.',
            position: 'topCenter',
            class: 'custom-toast'
        });
        return;
    }

    const inputCode = document.getElementById("discountCode").value.trim();
    const discountItem = discountData.find(item => item.code === inputCode);

    Object.keys(originalNameMap).forEach(type => {
        priceMap[type] = defaultPriceMap[type];
    });

    subtotal = calculateSubtotal();

    discountCode = inputCode;
    discount = 0;

    if (!discountItem) {
        iziToast.warning({
            title: 'Notice',
            message: 'Invalid discount code.',
            position: 'topCenter',
            class: 'custom-toast'
        });
    } else if (discountItem.type === "percentage" && discountItem.percentage_discount > 0) {
        Object.keys(priceMap).forEach(type => {
            priceMap[type] = priceMap[type] * (1 - discountItem.percentage_discount / 100);
        });
        discount = (subtotal * discountItem.percentage_discount) / 100;
        iziToast.success({
            title: 'Success',
            message: `Discount applied! (${discountItem.percentage_discount}% off)`,
            position: 'topCenter',
            class: 'custom-toast'
        });
    } else if (
        (discountItem.type === "specific" || discountItem.type === "absolute") &&
        discountItem.absolute_discount > 0
    ) {
        Object.keys(priceMap).forEach(type => {
            priceMap[type] = Math.max(0, priceMap[type] - discountItem.absolute_discount);
        });
        discount = discountItem.absolute_discount;
        iziToast.success({
            title: 'Success',
            message: `Discount applied! (CA$ ${discountItem.absolute_discount} off)`,
            position: 'topCenter',
            class: 'custom-toast'
        });
    } else if (discountItem.custom_fees?.reg_type) {
        const customFees = discountItem.custom_fees.reg_type;
        let appliedFeesCount = 0;

        Object.entries(customFees).forEach(([regTypeId, feeStr]) => {
            const fee = parseFloat(feeStr);
            if (!isNaN(fee)) {
                const type = Object.keys(regTypeIdMap).find(t => regTypeIdMap[t] == regTypeId);
                if (type) {
                    priceMap[type] = fee;
                    appliedFeesCount++;
                }
            }
        });

        if (appliedFeesCount > 0) {
            iziToast.success({
                title: 'Success',
                message: `Custom pricing applied to ${appliedFeesCount} ticket type${appliedFeesCount > 1 ? 's' : ''}.`,
                position: 'topCenter',
                class: 'custom-toast'
            });
        } else {
            iziToast.warning({
                title: 'Notice',
                message: 'Discount code applied, but no valid custom fee found.',
                position: 'topCenter',
                class: 'custom-toast'
            });
        }

        subtotal = calculateSubtotal();
        discount = 0;
    } else {
        iziToast.warning({
            title: 'Notice',
            message: 'Discount code applied, but no discount value detected.',
            position: 'topCenter',
            class: 'custom-toast'
        });
    }

    localStorage.setItem('ticketPriceMap', JSON.stringify(priceMap));

    const latestId = localStorage.getItem("latestDraftId");
    if (latestId) {
        const draftData = JSON.parse(localStorage.getItem(latestId)) || {};
        draftData.summary = {
            hst: totalHST || 0,
            total: total || 0,
            discount: discount || 0,
            discountCode: discountCode || null,
            subtotal: subtotal || 0,
            priceMap: priceMap
        };
        localStorage.setItem(latestId, JSON.stringify(draftData));
    } else {
        console.warn('latestDraftId not found in applyDiscountCode');
    }

    updateSummary();
}

document.getElementById("applyDiscount").addEventListener("click", applyDiscountCode);

function updateSummary() {
    if (!localStorage.getItem("latestDraftId")) {
        console.warn('updateSummary skipped: latestDraftId not set');
        return;
    }

    subtotal = 0;
    total = 0;
    totalHST = 0;
    let itemText = "";
    let hasItems = false;

    finalPriceMap = {};

    for (let type in qtyMap) {
        const qty = qtyMap[type];
        if (qty > 0) {
            hasItems = true;

            const price = priceMap[type];
            finalPriceMap[type] = price;

            const itemSubtotal = qty * price;
            const displayName = originalNameMap[type] || type;

            subtotal += itemSubtotal;

            itemText += `
                <span id="${type}ItemQty" class="float-start fw-semibold">${qty} x</span>
                <span class="ms-1 fw-semibold" id="${type}ItemName">${toTitleCase(displayName)}</span>
                <span id="${type}Price" class="float-end fw-semibold">
                    CA$ ${itemSubtotal.toLocaleString("en-CA", { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
                </span><br>`;
        }
    }

    totalHST = subtotal * HST_PERCENT;
    total = subtotal + totalHST;

    document.getElementById("summaryItem").innerHTML = itemText;
    document.getElementById("subtotal").innerText = "CA$ " + subtotal.toLocaleString("en-CA", { minimumFractionDigits: 2, maximumFractionDigits: 2 });
    document.getElementById("hst").innerText = "CA$ " + totalHST.toLocaleString("en-CA", { minimumFractionDigits: 2, maximumFractionDigits: 2 });
    document.getElementById("total").innerText = "CA$ " + total.toLocaleString("en-CA", { minimumFractionDigits: 2, maximumFractionDigits: 2 });

    document.getElementById("discount").innerText = discountCode || '';
    document.getElementById("btnNext").disabled = !hasItems;

    const latestId = localStorage.getItem("latestDraftId");
    if (latestId) {
        const draftData = JSON.parse(localStorage.getItem(latestId)) || {};
        draftData.summary = {
            hst: totalHST || 0,
            total: total || 0,
            discount: discount || 0,
            discountCode: discountCode || null,
            subtotal: subtotal || 0,
            priceMap: priceMap
        };
        localStorage.setItem(latestId, JSON.stringify(draftData));
    } else {
        console.warn('latestDraftId not found in updateSummary');
    }
}

const ticketPrices = [1695, 1495];

fetch(`https://checkout-beige.vercel.app/api/reg-types?event_id=${eventId}`)
    .then(res => res.json())
    .then(data => {
        const ticketContainer = document.getElementById('ticket');
        showSpinner('ticket');

        let latestId = localStorage.getItem("latestDraftId");
        if (!latestId) {
            latestId = `draft_${Date.now()}`;
            localStorage.setItem("latestDraftId", latestId);
        }

        setTimeout(() => {
            ticketContainer.innerHTML = '';
            priceMap = {};
            qtyMap = {};
            originalNameMap = {};
            regTypeIdMap = {};

            const savedQtyMap = JSON.parse(localStorage.getItem('ticketQtyMap')) || {};
            const savedPriceMap = JSON.parse(localStorage.getItem('ticketPriceMap')) || {};
            const draftData = JSON.parse(localStorage.getItem(latestId)) || {};
            const savedSummary = draftData.summary || {};

            discount = savedSummary.discount || 0;
            discountCode = savedSummary.discountCode || '';
            document.getElementById("discountCode").value = discountCode;

            data.items.forEach((item, index) => {
                const originalName = item.name;
                const type = sanitizeName(originalName);
                const price = ticketPrices[index] || 0;

                priceMap[type] = savedPriceMap[type] !== undefined ? savedPriceMap[type] : price;
                originalNameMap[type] = originalName;
                regTypeIdMap[type] = item.id;

                const qty = savedQtyMap[type] || 0;
                qtyMap[type] = qty;

                const borderClass = index === 0 ? "" : "border-top";
                const html = `
                    <div class="d-flex justify-content-between align-items-center ${borderClass} pt-3 pb-3">
                        <div>
                            <strong>${originalName}</strong>
                            <div class="fw-semibold">CA$ ${priceMap[type].toLocaleString('en-CA')}</div>
                            <small class="text-muted">${item.description || ''}</small>
                        </div>
                        <div class="qty-box">
                            <button class="btn btn-outline-secondary btn-qty me-2" onclick="changeQty('${type}', -1)">-</button>
                            <span id="${type}Qty">${qty}</span>
                            <button class="btn btn-outline-secondary btn-qty ms-2" onclick="changeQty('${type}', 1)">+</button>
                        </div>
                    </div>
                `;

                ticketContainer.insertAdjacentHTML('beforeend', html);
            });

            defaultPriceMap = { ...priceMap };

            localStorage.setItem("ticketQtyMap", JSON.stringify(qtyMap));
            localStorage.setItem("ticketPriceMap", JSON.stringify(priceMap));

            updateSummary();
            updateStepperUI();

            hideSpinner('ticket');
        }, 0);
    })
    .catch(error => {
        console.error('Error fetching reg-types:', error);
        hideSpinner('ticket');
    });

function calculateSubtotal() {
    let subtotal = 0;
    Object.keys(priceMap).forEach(type => {
        const qty = qtyMap[type] || 0;
        const price = priceMap[type] || 0;
        subtotal += qty * price;
    });
    return subtotal;
}

// Stepper
document.addEventListener('DOMContentLoaded', function () {
  const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
  tooltipTriggerList.forEach(function (tooltipTriggerEl) {
    new bootstrap.Tooltip(tooltipTriggerEl);
  });
});

const steps = ["ticket", "registration", "payment", "confirmation"];

const timestamp = localStorage.getItem("confirmationTimestamp");
if (timestamp) {
    const now = Date.now();
    const elapsed = now - parseInt(timestamp);
    const oneHour = 60 * 60 * 1000;

    if (elapsed > oneHour) {
        localStorage.removeItem("currentStep");
        localStorage.removeItem("confirmationTimestamp");
    }
}

let currentStep = parseInt(localStorage.getItem("currentStep")) || 0;

function updateStepperUI() {
    const discountInput = document.getElementById('discountCode');
    const applyDiscountButton = document.getElementById('applyDiscount');
    const tooltipTarget = document.getElementById('discountCode');

    steps.forEach((step, index) => {
        const stepLabel = document.getElementById(`step-${step}`);
        if (stepLabel) {
            stepLabel.classList.remove("fw-bold", "text-muted");
            stepLabel.classList.add(index === currentStep ? "fw-bold" : "text-muted");
        }
    });

    steps.forEach((step, index) => {
        const section = document.getElementById(step);
        if (section) {
            section.classList.toggle("d-none", index !== currentStep);
        }
    });

    document.getElementById("btnPrev").disabled = currentStep === 0;

    let tooltipMessage = null;
    if (steps[currentStep] === "payment") {
        tooltipMessage = "Discounts cannot be applied during payment.";
    } else if (steps[currentStep] !== "registration") {
        tooltipMessage = "You can apply a discount code on the registration step.";
    }

    if (tooltipTarget && typeof bootstrap !== 'undefined' && bootstrap.Tooltip) {
        const tooltipInstance = bootstrap.Tooltip.getInstance(tooltipTarget);
        if (tooltipInstance) {
            tooltipInstance.dispose();
        }

        if (tooltipMessage) {
            tooltipTarget.setAttribute("title", tooltipMessage);
            try {
                new bootstrap.Tooltip(tooltipTarget, {
                    placement: 'bottom',
                    trigger: 'hover focus'
                });
            } catch (error) {
                console.error('Failed to initialize tooltip:', error);
            }
        } else {
            tooltipTarget.removeAttribute("title");
        }
    } else {
        console.warn('Tooltip target (#discountCode) or Bootstrap Tooltip not available');
    }

    if (steps[currentStep] === "payment") {
        document.getElementById("btnNext").classList.add("d-none");
        document.getElementById("submit-payment").classList.remove("d-none");
        document.getElementById("submit-registration").classList.add("d-none");
        
        discountInput.disabled = true;
        applyDiscountButton.disabled = true;
        generatePaymentForm();
    } else if (steps[currentStep] === "registration") {
        document.getElementById("submit-registration").classList.remove("d-none");
        document.getElementById("submit-payment").classList.add("d-none");
        document.getElementById("btnNext").classList.add("d-none");

        discountInput.disabled = false;
        applyDiscountButton.disabled = false;

        generateRegistrationForm();
    } else if (steps[currentStep] === "confirmation") {
        document.getElementById("summary-container").classList.add("d-none");
        document.getElementById("confirmation-container").classList.remove("d-none");
        document.getElementById("btnPrev").classList.add("d-none");
        document.getElementById("submit-payment").classList.add("d-none");
        document.getElementById("btnNext").classList.add("d-none");

        displayRegistrantData();
    } else {

        document.getElementById("btnNext").classList.remove("d-none");
        document.getElementById("submit-registration").classList.add("d-none");
        document.getElementById("submit-payment").classList.add("d-none");

        discountInput.disabled = true;
        applyDiscountButton.disabled = true;
    }

    localStorage.setItem("currentStep", currentStep);
}

document.getElementById("btnNext").addEventListener("click", function () {
    if (currentStep < steps.length - 1) {
        currentStep++;
        updateStepperUI();
    }
});

document.getElementById("btnPrev").addEventListener("click", function () {
    if (currentStep > 0) {
        currentStep--;
        updateStepperUI();
    }
});

updateStepperUI();

// Generate Registration Forms
function generateRegistrationForm() {
    const registration = document.getElementById("registration");
    registration.innerHTML = "";

    showSpinner('registration');

    const requiredLabel = (text) =>
        `<label class="form-label required">${text} <span class="text-danger">*</span></label>`;

    const formHTML = `
    <form id="registration-form" action="/create-registrant" method="POST">
        <div id="registration-sections" class="scroll-area">
    `;

    let formContent = "";
    const uniqId = localStorage.getItem("latestDraftId") || `registration_${Date.now()}_${Math.floor(Math.random() * 1000000)}`;
    let savedData = localStorage.getItem(uniqId) ? JSON.parse(localStorage.getItem(uniqId)) : null;

    // Check if saved data is still valid (not expired)
    if (savedData && savedData.expiry && new Date().getTime() > savedData.expiry) {
        localStorage.removeItem(uniqId);
        localStorage.removeItem("latestDraftId");
        savedData = null;
    }

    fetch(`https://checkout-beige.vercel.app/api/reg-types?event_id=${eventId}`)
    .then(response => response.json())
    .then(data => {
        Object.keys(qtyMap).forEach(type => {
            const qty = qtyMap[type] || 0;
            for (let i = 1; i <= qty; i++) {
                const sanitizedType = sanitizeName(type);

                const items = data.items.filter(item => {
                    const sanitizedItemName = sanitizeName(item.name.trim());
                    return sanitizedItemName === sanitizedType;
                });

                if (items.length > 0) {
                    items.forEach(item => {
                        formContent += `
                        <div class="form-section mt-4">
                            <div class="d-flex justify-content-between align-items-center mb-3">
                                <h5 class="mb-0">${item.name || 'Unknown'} #${i}</h5>
                                <button class="btn btn-sm toggle-form" type="button" data-bs-target="#${sanitizedType}Form${i}">
                                    <span class="icon-label">
                                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-chevron-up" viewBox="0 0 16 16">
                                            <path fill-rule="evenodd" d="M1.646 10.854a.5.5 0 0 0 .708 0L8 5.207l5.646 5.647a.5.5 0 0 0 .708-.708l-6-6a.5.5 0 0 0-.708 0l-6 6a.5.5 0 0 0 0 .708z" />
                                        </svg>
                                    </span>
                                </button>
                            </div>
                            <div class="collapse show" id="${sanitizedType}Form${i}">
                                <input type="hidden" name="regType_${sanitizedType}_${i}" value="${item.id || ''}">
                                <div class="row mb-3">
                                    <div class="col-md-6 mb-3 mb-md-0">
                                        ${requiredLabel("First Name")}
                                        <input type="text" name="firstName_${sanitizedType}_${i}" class="form-control" required value="${savedData?.participants?.[sanitizedType]?.[i-1]?.firstName || ''}">
                                    </div>
                                    <div class="col-md-6">
                                        ${requiredLabel("Last Name")}
                                        <input type="text" name="lastName_${sanitizedType}_${i}" class="form-control" required value="${savedData?.participants?.[sanitizedType]?.[i-1]?.lastName || ''}">
                                    </div>
                                </div>
                                <div class="mb-3">
                                    ${requiredLabel("Email")}
                                    <input type="email" name="email_${sanitizedType}_${i}" class="form-control" required value="${savedData?.participants?.[sanitizedType]?.[i-1]?.email || ''}">
                                </div>
                                <div class="mb-3">
                                    ${requiredLabel("Company Name")}
                                    <input type="text" name="company_${sanitizedType}_${i}" class="form-control" required value="${savedData?.participants?.[sanitizedType]?.[i-1]?.company || ''}">
                                </div>
                                <div class="mb-3">
                                    ${requiredLabel("Job Title")}
                                    <input type="text" name="jobTitle_${sanitizedType}_${i}" class="form-control" required value="${savedData?.participants?.[sanitizedType]?.[i-1]?.jobTitle || ''}">
                                </div>
                                <div class="row mb-3">
                                    <div class="col-md-6 mb-3 mb-md-0">
                                        ${requiredLabel("Country")}
                                        <select class="form-control select-country" data-index="${i}" data-type="${sanitizedType}" name="country_${sanitizedType}_${i}" required>
                                            <option value="">Select Country</option>
                                        </select>
                                    </div>
                                    <div class="col-md-6">
                                        ${requiredLabel("State/Province")}
                                        <select class="form-control select-state" data-index="${i}" data-type="${sanitizedType}" name="state_${sanitizedType}_${i}" required>
                                            <option value="">Select State</option>
                                        </select>
                                    </div>
                                </div>
                                <div class="mb-3">
                                    ${requiredLabel("Work Phone")}
                                    <div class="input-group phone-input-group">
                                        <select name="phoneCode_${sanitizedType}_${i}" class="country-select" required>
                                            <option value="">Select Country Code</option>
                                        </select>
                                        <input type="tel" name="phoneNumber_${sanitizedType}_${i}" class="form-control phone-number-input" required value="${savedData?.participants?.[sanitizedType]?.[i-1]?.phone?.replace(savedData?.participants?.[sanitizedType]?.[i-1]?.phoneCode || '', '') || ''}">
                                    </div>
                                </div>
                            </div>
                        </div>`;
                    });
                }
            }
        });

        registration.innerHTML = formHTML + formContent + `</div></form>`;

        // Toggle form collapse
        document.querySelectorAll(".toggle-form").forEach(btn => {
            btn.addEventListener("click", function () {
                const targetSelector = btn.getAttribute("data-bs-target");
                const target = document.querySelector(targetSelector);
                const iconLabel = btn.querySelector(".icon-label");

                const bsCollapse = bootstrap.Collapse.getInstance(target) ||
                    new bootstrap.Collapse(target, { toggle: false });

                const isShown = target.classList.contains("show");

                if (isShown) {
                    bsCollapse.hide();
                    iconLabel.innerHTML = `
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-chevron-down" viewBox="0 16 16">
                            <path fill-rule="evenodd" d="M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z"/>
                        </svg>`;
                } else {
                    bsCollapse.show();
                    iconLabel.innerHTML = `
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-chevron-up" viewBox="0 0 16 16">
                            <path fill-rule="evenodd" d="M1.646 10.854a.5.5 0 0 0 .708 0L8 5.207l5.646 5.647a.5.5 0 0 0 .708-.708l-6-6a.5.5 0 0 0-.708 0l-6 6a.5.5 0 0 0 0 .708z"/>
                        </svg>`;
                }
            });
        });

        // Populate country and phone code selects
        function loadCountryPhone() {
            fetch('country-phone.json')
                .then(res => res.json())
                .then(countryData => {
                            const defaultFlag = 'https://upload.wikimedia.org/wikipedia/commons/b/b0/No_flag.svg';

                            $('.country-select').each(function () {
                                const $select = $(this);

                                const name = $select.attr('name');
                                const savedPhoneCode = savedData?.formFields?.[name] || '';

                                const $placeholderOption = new Option('Select Country', '', true, true);
                                $($placeholderOption)
                                    .attr('data-flag', defaultFlag)
                                    .attr('data-country', 'Select Country')
                                    .attr('disabled', 'disabled')
                                    .attr('hidden', 'hidden');
                                $select.append($placeholderOption);

                                Object.keys(countryData).forEach(code => {
                                    const c = countryData[code];
                                    const $option = new Option(`${c.name} (${c.phone[0]})`, c.phone[0], false, false);
                                    $($option)
                                        .attr('data-flag', c.image)
                                        .attr('data-country', c.name);
                                    $select.append($option);
                                });

                                $select.find('option').each(function () {
                                    if ($(this).data('country') === 'Canada') {
                                        $(this).prop('selected', true);
                                        return false;
                                    }
                                });

                                $select.select2({
                                    templateResult: formatFlag,
                                    templateSelection: formatFlag,
                                    placeholder: 'Select Country',
                                    width: '100%'
                                });

                                $select.trigger('change');

                                $select.on('change', function () {
                                    const latestId = localStorage.getItem('latestDraftId');
                                    const currentData = JSON.parse(localStorage.getItem(latestId));
                                    if (!currentData) return;

                                    if (!currentData.formFields) {
                                        currentData.formFields = {};
                                    }

                                    const selectedOption = $(this).find('option:selected');
                                    const phoneCode = selectedOption.val();
                                    const phoneCodeKey = $(this).attr('name');

                                    currentData.formFields[phoneCodeKey] = phoneCode;

                                    localStorage.setItem(latestId, JSON.stringify(currentData));
                                });

                            });

                            function formatFlag(opt) {
                                const isPlaceholder = !opt.id;
                                const flag = $(opt.element).data('flag') || (isPlaceholder ? defaultFlag : '');
                                const country = $(opt.element).data('country') || (isPlaceholder ? 'Select Country' : 'Unknown');
                                const phone = opt.id || '';

                                if (isPlaceholder) {
                                    return $(`<span><img src="${flag}" class="option-flag-placeholder me-1"> </span>`);
                                }

                                if ($(opt.element).is(':selected') && !opt.element.disabled) {
                                    return $(`<span><img src="${flag}" class="option-flag me-1"> </span>`);
                                }

                                return $(`<span><img src="${flag}" class="option-flag me-1"> ${country} (${phone})</span>`);
                            }

                })
                .catch(err => {
                    console.error('Failed to load country data:', err);
                    $('.country-select').html('<option value="">Failed to load countries</option>');
                });
        }

        // Populate country and state selects
        function loadCountries() {
            return fetch('country.json')
                .then(response => {
                    if (!response.ok) throw new Error('Network response was not ok');
                    return response.json();
                })
                .then(data => {
                    if (!Array.isArray(data)) {
                        throw new Error('Invalid country data format');
                    }

                    document.querySelectorAll('.select-country').forEach(select => {
                        const index = select.dataset.index;
                        const type = select.dataset.type;
                        const savedCountry = savedData?.participants?.[type]?.[index - 1]?.country || '';

                        data.forEach(option => {
                            if (option?.value && option?.label) {
                                const opt = document.createElement('option');
                                opt.value = option.value;
                                opt.textContent = option.label;
                                select.appendChild(opt);
                            }
                        });

                        if (savedCountry) {
                            $(select).val(savedCountry).trigger('change');
                        }
                    });
                })
                .catch(error => {
                    console.error('Error fetching country data:', error);
                    document.querySelectorAll('.select-country').forEach(select => {
                        select.innerHTML = '<option value="">Failed to load countries</option>';
                    });
                });
        }


        function loadStates() {
            return fetch('state.json')
                .then(response => {
                    if (!response.ok) throw new Error('Network response was not ok');
                    return response.json();
                })
                .then(data => {
                    if (!Array.isArray(data)) {
                        throw new Error('Invalid state data format');
                    }

                    document.querySelectorAll('.select-state').forEach(select => {
                        const index = select.dataset.index;
                        const type = select.dataset.type;
                        const savedState = savedData?.participants?.[type]?.[index - 1]?.state || '';

                        data.forEach(option => {
                            if (option?.value && option?.label) {
                                const opt = document.createElement('option');
                                opt.value = option.value;
                                opt.textContent = option.label;
                                if (option.value === savedState) {
                                    opt.selected = true;
                                }
                                select.appendChild(opt);
                            }
                        });
                    });
                })
                .catch(error => {
                    console.error('Error fetching state data:', error);
                    document.querySelectorAll('.select-state').forEach(select => {
                        select.innerHTML = '<option value="">Failed to load states</option>';
                    });
                });
        }

        const uniqId = localStorage.getItem("latestDraftId") || `registration_${Date.now()}`;

        function getPartialFormData() {
            const form = document.getElementById("registration-form");
            const formData = new FormData(form);
            const formFields = {};
            formData.forEach((value, key) => {
                formFields[key] = value;
            });
            return formFields;
        }

        function saveFormData() {
            const formFields = getPartialFormData();

            const now = new Date().getTime();
            const expiryTime = now + 10 * 60 * 1000;

            const draftData = {
                formFields,
                summary: {
                    hst: totalHST || 0,
                    total: total || 0,
                    discount: discount || 0,
                    discountCode: discountCode || null,
                    subtotal: subtotal || 0,
                },
                expiry: expiryTime,
                uniqId,
                createdAt: new Date().toISOString(),
                status: 'in_progress'
            };

            localStorage.setItem(uniqId, JSON.stringify(draftData));
            localStorage.setItem("latestDraftId", uniqId);
        }

        document.getElementById("registration-form").addEventListener("input", saveFormData);
        document.getElementById("registration-form").addEventListener("change", saveFormData);

        function loadSavedFormData() {
            const latestId = localStorage.getItem("latestDraftId");
            if (!latestId) return;

            const savedData = JSON.parse(localStorage.getItem(latestId));
            if (!savedData || !savedData.formFields) return;

            const form = document.getElementById("registration-form");
            const formFields = savedData.formFields;

            for (const [key, value] of Object.entries(formFields)) {
                const input = form.querySelector(`[name="${key}"]`);
                if (input) {
                    input.value = value;
                    $(input).val(value).trigger('change');
                }
            }
        }

        Promise.all([
            loadCountryPhone(),
            loadCountries(),
            loadStates()
        ]).then(() => {
            loadSavedFormData();
        });

        // Form validation and participants data collection
        const form = document.getElementById("registration-form");
        const submitButton = document.getElementById("submit-registration");
        if (!form || !submitButton) {
            console.error("Form or submit button not found");
            return;
        }

        submitButton.addEventListener("click", function (event) {
            event.preventDefault();
            let formValid = true;

            // Validate phone inputs
            form.querySelectorAll(".phone-input-group").forEach(group => {
                const countrySelect = group.querySelector(".country-select[required]");
                const phoneInput = group.querySelector(".phone-number-input[required]");
                let errorMessage = group.nextElementSibling;

                if (errorMessage?.classList.contains("error-message")) {
                    errorMessage.remove();
                }

                let errorText = "";
                if (countrySelect && !countrySelect.value) {
                    errorText = "*Please select a country code*";
                    formValid = false;
                } else if (phoneInput && !phoneInput.value.trim()) {
                    errorText = "*Please enter a phone number*";
                    formValid = false;
                }

                if (errorText) {
                    const errorElement = document.createElement("span");
                    errorElement.className = "error-message";
                    errorElement.style.color = "#e74c3c";
                    errorElement.style.fontSize = "12px";
                    errorElement.style.marginTop = "5px";
                    errorElement.style.display = "block";
                    errorElement.textContent = errorText;
                    group.parentNode.appendChild(errorElement);
                }
            });

            // Validate other inputs
            form.querySelectorAll(".form-control[required]:not(.phone-number-input), .select-state[required]").forEach(input => {
                let errorMessage = input.nextElementSibling;

                function getLabelText(input) {
                    let labelText = "This field";
                    const inputId = input.id;
                    let label = inputId ? form.querySelector(`label[for="${inputId}"]`) : null;

                    if (!label) {
                        label = input.parentNode.querySelector("label") || input.previousElementSibling;
                    }

                    if (label) {
                        labelText = label.textContent.trim().replace(/[:*]/g, "").toLowerCase();
                    }
                    return labelText;
                }

                if (input.tagName.toLowerCase() === "select") {
                    if (!input.value) {
                        formValid = false;
                        if (!errorMessage || !errorMessage.classList.contains("error-message")) {
                            const errorText = document.createElement("span");
                            errorText.className = "error-message";
                            errorText.style.color = "#e74c3c";
                            errorText.style.fontSize = "12px";
                            errorText.style.marginTop = "5px";
                            errorText.style.display = "block";
                            const labelText = input.classList.contains("select-state") ? "state" : getLabelText(input);
                            errorText.textContent = `*Please select a ${labelText}*`;
                            input.parentNode.appendChild(errorText);
                        }
                    } else if (errorMessage?.classList.contains("error-message")) {
                        errorMessage.remove();
                    }
                } else {
                    if (!input.value.trim()) {
                        formValid = false;
                        if (!errorMessage || !errorMessage.classList.contains("error-message")) {
                            const errorText = document.createElement("span");
                            errorText.className = "error-message";
                            errorText.style.color = "#e74c3c";
                            errorText.style.fontSize = "12px";
                            errorText.style.marginTop = "5px";
                            errorText.style.display = "block";
                            const labelText = getLabelText(input);
                            errorText.textContent = `*Please enter your ${labelText}*`;
                            input.parentNode.appendChild(errorText);
                        }
                    } else if (errorMessage?.classList.contains("error-message")) {
                        errorMessage.remove();
                    }
                }
            });

            if (!formValid) return;

            // Collect participants data
            const formData = new FormData(form);
            const formFields = {};
            formData.forEach((value, key) => {
                formFields[key] = value;
            });

            function getParticipantsData(formFields) {
                const participants = {};
                const pattern = /^(firstName|lastName|email|company|jobTitle|country|state|phoneCode|phoneNumber|regType)_(\w+)_(\d+)$/;

                Object.keys(formFields).forEach(fieldName => {
                    const matches = fieldName.match(pattern);
                    if (matches) {
                        const [_, field, ticketType, index] = matches;

                        if (!participants[ticketType]) {
                            participants[ticketType] = [];
                        }

                        if (!participants[ticketType][index - 1]) {
                            participants[ticketType][index - 1] = {
                                firstName: '',
                                lastName: '',
                                email: '',
                                company: '',
                                jobTitle: '',
                                country: '',
                                state: '',
                                phone: '',
                                phoneCode: '',
                                regType: '',
                                price: 0,
                                hst: 0,
                            };
                        }

                        if (field !== 'phoneCode' && field !== 'phoneNumber') {
                            participants[ticketType][index - 1][field] = formFields[fieldName];
                        }

                        if (field === 'phoneCode') {
                            participants[ticketType][index - 1].phoneCode = formFields[fieldName];
                        }

                        if (field === 'regType') {
                            const regTypeInput = document.querySelector(`input[name="regType_${ticketType}_${index}"]`);
                            if (regTypeInput) {
                                participants[ticketType][index - 1].regType = regTypeInput.value;
                            }
                        }
                    }
                });

                Object.keys(participants).forEach(ticketType => {
                    participants[ticketType].forEach((participant, i) => {
                        const index = i + 1;
                        const phoneCode = formFields[`phoneCode_${ticketType}_${index}`] || '';
                        const phoneNumber = formFields[`phoneNumber_${ticketType}_${index}`] || '';
                        participant.phone = `${phoneCode}${phoneNumber}`.trim();
                        participant.discount = discountCode ? String(discountCode) : null;
                        participant.price = finalPriceMap?.[ticketType] || 0;
                        const hstAmount = participant.price * (HST_PERCENT || 0);
                        participant.hst = hstAmount;
                    });
                });

                return participants;
            }

            const participants = getParticipantsData(formFields);

            const fieldMap = {
                country: 'c_5970654',
                state: 'c_5970655',
            };

            const url = new URL(window.location.href);
            var ref_code = url.searchParams.get("ref");

            // Submit participants data
            const requestData = {
                participants,
                eventId,
                fieldMap,
                reference: ref_code || null,
                summary: {
                    hst: totalHST || 0,
                    total: total || 0,
                    discount: discount || 0,
                    discountCode: discountCode || null,
                    subtotal: subtotal || 0,
                }
            };

            const loading = showLoadingModal();

            fetch('https://checkout-beige.vercel.app/api/create-registrant', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(requestData),
            })
            .then(async res => {
                const data = await res.json();
                if (!res.ok) throw { ...data, httpError: true };
                return data;
            })
            .then(data => {
                if (loading && typeof hideLoadingModal === 'function') hideLoadingModal(loading);

                const hasError = !data.success || data.failedParticipants || data.error || !data.nextStep;
                if (hasError) {
                    const errors = (data.failedParticipants || []).map(p =>
                        (p.failedParticipants || []).map(inner =>
                            (inner.error || []).map(e => e.message).join(', ') || inner.message || ''
                        ).join('<br>')
                    ).join('<br>') || data.message || 'Registration failed';

                    iziToast.error({
                        title: 'Registration Error',
                        message: errors,
                        position: 'topCenter',
                        class: 'custom-toast',
                    });

                    throw new Error(errors);
                }

                const latestId = localStorage.getItem("latestDraftId");
                if (!latestId) {
                    iziToast.warning({
                        title: 'Warning',
                        message: 'Draft ID not found. Please try again.',
                        position: 'topCenter',
                        class: 'custom-toast',
                    });
                    return;
                }

                const draftData = JSON.parse(localStorage.getItem(latestId)) || {};
                const currentSummary = draftData.summary || {};

                const storageData = {
                    participants: requestData.participants,
                    registrantIds: data.registrantIds,
                    summary: {
                        ...requestData.summary,
                        discount: currentSummary.discount || 0,
                        discountCode: currentSummary.discountCode || null
                    },
                    expiry: data.expiry,
                    uniqId,
                    createdAt: new Date().toISOString(),
                    status: 'in_progress'
                };

                localStorage.setItem(latestId, JSON.stringify(storageData));

                const nextStepIndex = steps.indexOf(data.nextStep);
                if (nextStepIndex !== -1) {
                    currentStep = nextStepIndex;
                    localStorage.setItem("currentStep", currentStep);
                    updateStepperUI();
                    window.scrollTo(0, 0);
                } else {
                    console.warn('Invalid nextStep:', data.nextStep);
                }
            })
            .catch(err => {
                if (loading && typeof hideLoadingModal === 'function') hideLoadingModal(loading);

                const errors = (err.failedParticipants || []).map(p =>
                    (p.failedParticipants || []).map(inner =>
                        (inner.error || []).map(e => e.message).join(', ') || inner.message || ''
                    ).join('<br>')
                ).join('<br>') || err.message || 'Something went wrong';

                iziToast.error({
                    title: err.httpError ? 'Registration Error' : 'Network Error',
                    message: errors,
                    position: 'topCenter',
                    class: 'custom-toast',
                });

                console.error('Error in create-registrant:', errors);

                return;
            });


        });
    })
    .catch(error => {
        console.error('Error fetching data:', error);
        if (typeof iziToast !== 'undefined') {
            iziToast.error({
                title: 'Error',
                message: error.message || 'Failed to load registration types.',
                position: 'topCenter',
                class: 'custom-toast',
            });
        } else {
            console.error('Failed to load registration types:', error);
        }
    })
    .finally(() => {
        if (typeof hideSpinner === 'function') hideSpinner('registration');
    });

    function showLoadingModal(text = "Processing your registration...") {
        const modalTextEl = document.getElementById("loadingModalText");
        if (modalTextEl) {
            modalTextEl.textContent = text;
        }

        const modal = new bootstrap.Modal(document.getElementById("loadingModal"));
        modal.show();
        return modal;
    }


    function hideLoadingModal(modalInstance) {
        modalInstance.hide();
    }
}

// Generate Payment Forms
function generatePaymentForm() {
    const payment = document.getElementById("payment");
    payment.innerHTML = "";
    showSpinner('payment');

    const requiredLabel = (text) =>
        `<label class="form-label required">${text} <span class="text-danger">*</span></label>`;

    const latestId = localStorage.getItem("latestDraftId");
    let draftData = {};
    if (latestId) {
        draftData = JSON.parse(localStorage.getItem(latestId)) || {};
    }

    if (!draftData.registrantIds || !Array.isArray(draftData.registrantIds)) {
        console.error('Missing registrantIds', draftData);
        iziToast.error({
            title: 'Error',
            message: 'Registration data incomplete. Please start over.',
            position: 'topCenter'
        });
        hideSpinner('payment');
        return;
    }

    const formHTML = `
    <form id="payment-form" action="/process-payment" method="POST">
        <div id="payment-sections">
            <div class="form-section mt-4">
                <div class="d-flex justify-content-between align-items-center mb-3">
                    <h5 class="mb-0">Payment Method</h5>
                    <img src="/assets/stripe.svg" alt="Stripe Logo" class="mt-2" style="height: 30px;">
                </div>
                <div id="stripe-payment-form">
                    <div class="mt-4 mb-3">
                        <h6 class="form-label">Card Details</h6>
                    </div>
                    <div class="mb-3">
                        ${requiredLabel("Email")}
                        <input type="email" id="email-payment" class="form-control" required>
                    </div>
                    <div class="mb-3">
                        ${requiredLabel("Card Information")}
                        <div id="card-element" class="form-control p-3"></div>
                        <div id="card-errors" role="alert" style="color: #e74c3c; font-size: 12px;"></div>
                    </div>
                    <div class="mb-3">
                        ${requiredLabel("Name on Card")}
                        <input type="text" id="name-on-card" class="form-control" required>
                    </div>
                    <div class="mt-4 mb-3">
                        <h6 class="form-label">Billing Address</h6>
                    </div>
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            ${requiredLabel("Address Line 1")}
                            <input type="text" id="billing-address-line1" class="form-control" required>
                        </div>
                        <div class="col-md-6 mb-3">
                            ${requiredLabel("City")}
                            <input type="text" id="billing-city" class="form-control" required>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            ${requiredLabel("Country")}
                            <select id="billing-country" class="form-control" required>
                                <option value="">Select Country</option>
                            </select>
                        </div>
                        <div class="col-md-6 mb-3">
                            ${requiredLabel("Postal Code")}
                            <input type="text" id="billing-postal-code" class="form-control" required>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </form>
    `;

    payment.innerHTML = formHTML;

    const savedPayment = draftData.payment || {};
    document.getElementById("email-payment").value = savedPayment.email || "";
    document.getElementById("name-on-card").value = savedPayment.nameOnCard || "";
    document.getElementById("billing-address-line1").value = savedPayment.billingAddressLine1 || "";
    document.getElementById("billing-city").value = savedPayment.billingCity || "";
    document.getElementById("billing-country").value = savedPayment.billingCountry || "";
    document.getElementById("billing-postal-code").value = savedPayment.billingPostalCode || "";

    const savePaymentInputs = () => {
        if (!latestId) return;
        const paymentData = {
            email: document.getElementById("email-payment").value,
            nameOnCard: document.getElementById("name-on-card").value,
            billingAddressLine1: document.getElementById("billing-address-line1").value,
            billingCity: document.getElementById("billing-city").value,
            billingCountry: document.getElementById("billing-country").value,
            billingPostalCode: document.getElementById("billing-postal-code").value,
        };
        draftData.payment = paymentData;
        localStorage.setItem(latestId, JSON.stringify(draftData));
    };

    const inputs = [
        "email-payment",
        "name-on-card",
        "billing-address-line1",
        "billing-city",
        "billing-country",
        "billing-postal-code",
    ];
    inputs.forEach(id => {
        const input = document.getElementById(id);
        input.addEventListener("input", savePaymentInputs);
        if (id === "billing-country") {
            input.addEventListener("change", savePaymentInputs);
        }
    });

    fetch('https://raw.githubusercontent.com/khkwan0/countryCityStateJson/refs/heads/master/src/country-state-city/lib/country.json')
        .then(response => {
            if (!response.ok) throw new Error('Network response was not ok');
            return response.json();
        })
        .then(countries => {
            const billingCountry = document.getElementById('billing-country');
            if (billingCountry && billingCountry.options.length <= 1) {
                countries.forEach(country => {
                    const option = document.createElement('option');
                    option.value = country.sortname;
                    option.dataset.id = country.id;
                    option.textContent = country.name;
                    billingCountry.appendChild(option);
                });
                if (draftData.payment && draftData.payment.billingCountry) {
                    billingCountry.value = draftData.payment.billingCountry;
                }
            }
        })
        .catch(error => console.error('Error fetching country data:', error));

        // Stripe Integration
        const elements = stripe.elements();
        const card = elements.create("card");
        card.mount("#card-element");

        const form = document.getElementById("payment");
        const submitButton = document.getElementById("submit-payment");
        const cardErrors = document.getElementById("card-errors");

        submitButton.addEventListener("click", function (event) {
                event.preventDefault();
                let formValid = true;
                const phoneGroups = form.querySelectorAll(".phone-input-group");

                phoneGroups.forEach(function (group) {
                    const countrySelect = group.querySelector(".country-select[required]");
                    const phoneInput = group.querySelector(".phone-number-input[required]");
                    const existingError = group.parentNode.querySelector(".error-message");

                    if (existingError) {
                        existingError.remove();
                    }

                    let errorMessage = "";
                    const countrySelectEmpty = countrySelect && !countrySelect.value;
                    const phoneInputEmpty = phoneInput && !phoneInput.value.trim();

                    if (countrySelectEmpty && phoneInputEmpty) {
                        errorMessage = "*Please select a country code and enter a phone number*";
                        formValid = false;
                    } else if (countrySelectEmpty) {
                        errorMessage = "*Please select a country code*";
                        formValid = false;
                    } else if (phoneInputEmpty) {
                        errorMessage = "*Please enter a phone number*";
                        formValid = false;
                    }

                    if (errorMessage) {
                        const errorText = document.createElement("span");
                        errorText.className = "error-message";
                        errorText.style.color = "#e74c3c";
                        errorText.style.fontSize = "12px";
                        errorText.style.marginLeft = "10px";
                        errorText.style.marginTop = "5px";
                        errorText.style.display = "block";
                        errorText.textContent = errorMessage;
                        group.parentNode.appendChild(errorText);
                    }
                });

                const otherControls = form.querySelectorAll(".form-control[required]:not(.phone-number-input), .state-select[required]");

                otherControls.forEach(function (input) {
                    const errorMessage = input.nextElementSibling;
                    let errorText;
                    function getLabelText(input) {
                        let labelText = "This field";
                        const inputId = input.id;
                        let label;
                        if (inputId) {
                            label = form.querySelector(`label[for="${inputId}"]`);
                        }
                        if (!label) {
                            label = input.parentNode.querySelector("label") || input.previousElementSibling;
                        }
                        if (label) {
                            labelText = label.textContent.trim().replace(/[:*]/g, "").toLowerCase();
                        }
                        return labelText;
                    }
                    if (input.tagName.toLowerCase() === "select") {
                        if (!input.value) {
                            formValid = false;
                            if (!errorMessage || !errorMessage.classList.contains("error-message")) {
                                errorText = document.createElement("span");
                                errorText.className = "error-message";
                                errorText.style.color = "#e74c3c";
                                errorText.style.fontSize = "12px";
                                errorText.style.marginLeft = "10px";
                                errorText.style.marginTop = "5px";
                                const labelText = input.classList.contains("state-select")
                                    ? "state"
                                    : getLabelText(input);
                                errorText.textContent = `*Please select a ${labelText}*`;
                                input.parentNode.appendChild(errorText);
                            }
                        } else {
                            if (errorMessage && errorMessage.classList.contains("error-message")) {
                                errorMessage.remove();
                            }
                        }
                    } else {
                        if (!input.value.trim()) {
                            formValid = false;
                            if (!errorMessage || !errorMessage.classList.contains("error-message")) {
                                errorText = document.createElement("span");
                                errorText.className = "error-message";
                                errorText.style.color = "#e74c3c";
                                errorText.style.fontSize = "12px";
                                errorText.style.marginLeft = "10px";
                                errorText.style.marginTop = "5px";
                                const labelText = getLabelText(input);
                                errorText.textContent = `*Please enter your ${labelText}*`;
                                input.parentNode.appendChild(errorText);
                            }
                        } else {
                            if (errorMessage && errorMessage.classList.contains("error-message")) {
                                errorMessage.remove();
                            }
                        }
                    }
                });
            if (!formValid) {
                return;
            }
            stripe.createToken(card).then(function (result) {
                if (result.error) {
                    cardErrors.textContent = '*' + result.error.message;
                } else {
                    cardErrors.textContent = '';
                    stripeTokenHandler(result.token);
                }
            });
        });

    function stripeTokenHandler(token) {
        const amountInCents = Math.round(draftData.summary.total * 100);
        const paymentData = {
            token: token.id,
            amount: amountInCents,
            description: "Event Registration Big Data Canada",
            email: document.getElementById("email-payment").value,
            nameOnCard: document.getElementById("name-on-card").value,
            billingAddressLine1: document.getElementById("billing-address-line1").value,
            billingCity: document.getElementById("billing-city").value,
            billingCountry: document.getElementById("billing-country").value,
            billingPostalCode: document.getElementById("billing-postal-code").value,
            eventId: draftData.eventId,
            registrantIds: draftData.registrantIds,
        };

        const loading = showLoadingModal("Processing Payment...");

        fetch('https://checkout-beige.vercel.app/api/process-payment', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(paymentData),
        })
            .then(response => response.json())
            .then(data => {
                hideLoadingModal(loading);

                if (!data.success) {
                    throw new Error(data.message || "Payment failed. Please try again.");
                }

                if (!draftData || !draftData.participants) {
                    throw new Error("Invalid draft data. Please retry.");
                }

                showPaymentStatus("Payment successful!", true);

                const latestId = draftData.uniqId;
                const uniqId = draftData.uniqId
                ? draftData.uniqId.replace(/^draft_/, 'registration_')
                : `registration_${Date.now()}`;
                const registrationId = uniqId;

                draftData.payment = {
                    email: paymentData.email,
                    nameOnCard: paymentData.nameOnCard,
                    billingAddressLine1: paymentData.billingAddressLine1,
                    billingCity: paymentData.billingCity,
                    billingCountry: paymentData.billingCountry,
                    billingPostalCode: paymentData.billingPostalCode,
                };
                draftData.status = 'confirmed';
                draftData.updatedAt = new Date().toISOString();
                draftData.uniqId = registrationId;

                localStorage.setItem(registrationId, JSON.stringify(draftData));
                localStorage.setItem("latestRegistrationId", registrationId);
                if (latestId) {
                    localStorage.removeItem(latestId);
                }
                localStorage.removeItem("latestDraftId");

                const nextStepName = data.nextStep;
                const nextStepIndex = steps.indexOf(nextStepName);
                if (nextStepIndex !== -1) {
                    currentStep = nextStepIndex;
                    localStorage.setItem("currentStep", currentStep);
                    updateStepperUI();
                    window.scrollTo(0, 0);
                    displayRegistrantData();
                }
            })
            .catch(error => {
                hideLoadingModal(loading);
                showPaymentStatus("Payment failed. Please try again.", false);

                iziToast.error({
                    title: 'Payment Error',
                    message: error.message || "Something went wrong.",
                    position: 'topCenter',
                    class: 'custom-toast',
                });

                console.error('Payment error:', error);
            });


            function showLoadingModal(text = "Processing Payment...") {
                const modalTextEl = document.getElementById("loadingModalText");
                if (modalTextEl) {
                    modalTextEl.textContent = text;
                }
                const modal = new bootstrap.Modal(document.getElementById("loadingModal"));
                modal.show();
                return modal;
            }

            function hideLoadingModal(modalInstance) {
                modalInstance.hide();
            }
    }

    function showPaymentStatus(message, isSuccess) {
        iziToast.show({
            title: isSuccess ? 'Success' : 'Error',
            message: message,
            color: isSuccess ? 'green' : 'red',
            position: 'topCenter',
            timeout: 3000,
            transitionIn: 'fadeIn',
            transitionOut: 'fadeOut',
            class: 'custom-toast',
        });
    }

    hideSpinner('payment');
}

function formatTicketType(ticketType) {
    return ticketType
        .replace(/([a-z])([A-Z])/g, '$1 $2')
        .replace(/^./, str => str.toUpperCase());
}

function loadRegistrantData() {
    const registrationId = localStorage.getItem("latestRegistrationId");
    if (!registrationId) return null;
    
    const draftDataRaw = localStorage.getItem(registrationId);
    if (!draftDataRaw) return null;

    try {
        const draftData = JSON.parse(draftDataRaw);
        const expiryTimestamp = new Date(draftData.expiry).getTime();
        const currentTimestamp = Date.now();

        if (draftData.expiry && expiryTimestamp < currentTimestamp) {
            localStorage.removeItem(registrationId);
            localStorage.removeItem("latestRegistrationId");
            localStorage.removeItem("ticketQtyMap");
            localStorage.removeItem("ticketPriceMap");
            localStorage.removeItem("currentStep");
            localStorage.removeItem("confirmationTimestamp");

            const expiryModal = new bootstrap.Modal(document.getElementById('expiryModal'), {
                keyboard: false
            });
            expiryModal.show();

            document.getElementById('expiryModalOkBtn').addEventListener('click', () => {
                localStorage.setItem("currentStep", "0");
                window.location.reload();
            });
            return null;
        }
        return draftData;
    } catch (e) {
        console.error("Invalid JSON in localStorage for registrationId:", registrationId);
        return null;
    }
}

function displayRegistrantData() {
    const data = loadRegistrantData();

    document.getElementById("confirmation").classList.remove("d-none");

    let allParticipants = [];
    for (const [ticketType, participantList] of Object.entries(data.participants)) {
        participantList.forEach(participant => {
            allParticipants.push({ ...participant, ticketType });
        });
    }
    const summary = data.summary;

    document.getElementById("eventDate").classList.add("d-none");
    fetchAndDisplayEventDate(eventId, ['eventDateConfirmed']);
    document.getElementById("formTitleText").textContent = "Registration Confirmed";
    document.getElementById("confirmationIcon").classList.remove("d-none");

    const registrantTbody = document.querySelector("#registrantTable tbody");
    registrantTbody.innerHTML = "";

    allParticipants.forEach(participant => {
        const price = participant.price;
        const hst = participant.hst || price * HST_PERCENT;
        const subtotal = price + hst;

        const row = document.createElement("tr");
        row.innerHTML = `
            <td>${participant.firstName} ${participant.lastName}</td>
            <td>${formatTicketType(participant.ticketType)}</td>
            <td>CA$ ${price.toLocaleString('en-CA', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</td>
            <td>CA$ ${hst.toLocaleString('en-CA', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</td>
            <td class="text-end">CA$ ${subtotal.toLocaleString('en-CA', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</td>
        `;
        registrantTbody.appendChild(row);
    });

    document.querySelector("#registrantTable tfoot").innerHTML = `
    <tr>
        <td colspan="5">
            <div class="d-flex justify-content-between">
                <strong>Discount</strong>
                <strong>${summary.discountCode ?? ""}</strong>
            </div>
        </td>
    </tr>
    <tr>
        <td colspan="5" style="border-top: 0.5px solid #969696">
            <div class="d-flex justify-content-between">
                <strong>Total</strong>
                <strong>CA$ ${summary.total.toLocaleString('en-CA', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</strong>
            </div>
        </td>
    </tr>`;

    const createdAtDate = new Date(data.createdAt);
    const formattedDate = createdAtDate.toLocaleDateString('en-US', {
        month: 'numeric',
        day: 'numeric',
        year: '2-digit',
        hour: 'numeric',
        minute: 'numeric',
        hour12: true
    });

    const transactionTbody = document.querySelector("#transactionTable tbody");
    transactionTbody.innerHTML = `
        <tr>
            <td>${formattedDate}</td>
            <td>Order Amount</td>
            <td class="text-end">CA$ ${summary.total.toLocaleString('en-CA', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</td>
        </tr>
        <tr>
            <td>${formattedDate}</td>
            <td>Credit Card</td>
            <td class="text-end">-CA$ ${summary.total.toLocaleString('en-CA', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</td>
        </tr>
    `;

    document.getElementById("balanceDue").textContent = 'CA$ 0.00';
}


// Datatable
$(document).ready(function () {
    $('#registrantTable').DataTable({
        ordering: false
    });

    $('#transactionTable').DataTable({
        ordering: false
    });
});


document.getElementById('btnDownload').addEventListener('click', async () => {
    const loading = showLoadingInvoiceModal();

    const data = loadRegistrantData();

    if (!data) {
        alert("No payment data found.");
        return;
    }

    const participantsObj = data.participants || {};
    const summary = data.summary || {};
    const payment = data.payment || {};
    const createdAtDate = new Date(data.createdAt || new Date());
    const formattedDate = createdAtDate.toLocaleDateString('en-US', {
        month: 'numeric',
        day: 'numeric',
        year: '2-digit',
        hour: 'numeric',
        minute: 'numeric',
        hour12: true
    });

    const participants = Object.entries(participantsObj).flatMap(([ticketType, list]) =>
        list.map(p => ({ ...p, ticketType }))
    );


    const participantRows = participants.map(participant => `
        <tr>
            <td>${participant.firstName} ${participant.lastName}</td>
            <td>${formatTicketType(participant.ticketType)}</td>
            <td>CA$ ${(participant.price).toLocaleString('en-CA', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</td>
            <td>CA$ ${(summary.hst / participants.length).toLocaleString('en-CA', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</td>
            <td class="text-end">CA$ ${((summary.total - summary.discount) / participants.length).toLocaleString('en-CA', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</td>
        </tr>
    `).join('');

    const transactionRow = `
        <tr>
            <td>${formattedDate}</td>
            <td>Order Amount</td>
            <td class="text-end">CA$ ${summary.total.toLocaleString('en-CA', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</td>
        </tr>
        <tr>
            <td>${formattedDate}</td>
            <td>Credit Card</td>
            <td class="text-end">-CA$ ${summary.total.toLocaleString('en-CA', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</td>
        </tr>
    `;

    const htmlContent = `
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8" />
            <meta name="viewport" content="width=device-width, initial-scale=1.0" />
            <title>Invoice</title>
            <link
            href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css"
            rel="stylesheet"
            />
            <style>
            body {
                font-family: "Segoe UI", sans-serif;
                padding: 40px;
                box-shadow: none;
            }
            .invoice-header {
                border-bottom: 2px solid #dee2e6;
                padding-bottom: 20px;
                margin-bottom: 30px;
            }
            .invoice-title {
                font-size: 24px;
                font-weight: bold;
            }
            .invoice-logo img {
                max-height: 60px;
            }
            #registrantTable thead th {
                font-weight: 500;
                border-bottom: none;
            }
            #transactionTable thead th {
                font-weight: 500;
                text-align: left;
                padding: 12px 8px;
                border-bottom: 1px solid #ddd;
            }
            #transactionTable tbody td {
                padding: 12px 8px;
            }
            #transactionTable .text-end {
                text-align: right;
            }

            table {
                font-size: 13px !important;
            }

            table th,
            table td {
                font-size: 13px !important;
            }
            </style>
        </head>
        <body>
            <div class="container">
            <div class="row invoice-header align-items-center">
                <div class="col-md-6 invoice-title">INVOICE</div>
                <div class="col-md-6 text-end invoice-logo">
                <img src="https://register.bigdatacanada.ca/assets/logo-black.webp" alt="Company Logo" />
                </div>
            </div>

            <div class="row mb-4">
                <div class="col-md-6">
                <p><strong>Invoice Date:</strong><br /> 
                    ${formattedDate}</p>
                </div>
                <div class="col-md-6 text-end">
                <p>
                    <strong>Billed To:</strong><br />
                    ${payment.nameOnCard}<br />
                    ${payment.email}<br />
                </p>
                </div>
            </div>

            <h5 class="mb-3">Registrant Details</h5>
            <div class="table-responsive">
                <table
                id="registrantTable"
                class="table table-bordered table-striped"
                style="width: 100%"
                >
                <thead>
                    <tr>
                    <th>Registrant Name</th>
                    <th>Ticket Type</th>
                    <th>Unit Price</th>
                    <th>HST</th>
                    <th class="text-end">Subtotal</th>
                    </tr>
                </thead>
                <tbody>${participantRows}</tbody>
                <tfoot>
                    <tr>
                        <td colspan="5">
                            <div class="d-flex justify-content-between">
                                <strong>Discount Code</strong>
                                <strong>${summary.discountCode ?? ""}</strong>
                            </div>
                        </td>
                    </tr>
                    <tr>
                        <td colspan="5" style="border-top: 0.5px solid rgb(212, 212, 212)">
                            <div class="d-flex justify-content-between">
                                <strong>Total</strong>
                                <strong>CA$ ${summary.total.toLocaleString('en-CA', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</strong>
                            </div>
                        </td>
                    </tr>
                </tfoot>
                </table>
            </div>

            <h5 class="mt-2 mb-3">Transaction Summary</h5>
            <div class="table-responsive">
                <table id="transactionTable" class="table table-bordered table-striped w-100">
                <thead>
                    <tr>
                    <th>Date</th>
                    <th>Transaction Type</th>
                    <th class="text-end">Amount</th>
                    </tr>
                </thead>
                <tbody>${transactionRow}</tbody>
                <tfoot>
                    <tr>
                    <td colspan="3">
                        <div class="d-flex justify-content-between">
                        <strong>Balance Due</strong>
                        <strong id="balanceDue">CA$ 0.00</strong>
                        </div>
                    </td>
                    </tr>
                </tfoot>
                </table>
            </div>
            </div>
        </body>
        </html>

    `;

    const fullName = `${participants[0].firstName}_${participants[0].lastName}`;
    const uniqId = data.uniqId || 'invoice';
    const fileName = `invoice_${fullName}_${uniqId}.pdf`;

    const response = await fetch('https://checkout-beige.vercel.app/api/generate-invoice', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({ htmlContent, fileName })
    });

    const isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;
    const isAndroid = /Android/i.test(navigator.userAgent);
    const isMobile = isIOS || isAndroid || window.innerWidth <= 768;

    hideLoadingInvoiceModal(loading);

    if (response.ok) {
        const pdfBlob = await response.blob();

        if (pdfBlob.type === 'application/pdf') {
            if (isIOS) {
                const pdfURL = URL.createObjectURL(pdfBlob);
                window.location.href = pdfURL;
                iziToast.success({
                    title: 'Success',
                    message: 'Invoice opened. Tap share or save to download.',
                    position: 'topCenter',
                    class: 'custom-toast',
                    timeout: 3000,
                });
            } else if (isMobile) {
                const pdfURL = URL.createObjectURL(pdfBlob);
                const link = document.createElement('a');
                link.href = pdfURL;
                link.download = fileName;
                link.click();

                iziToast.success({
                    title: 'Success',
                    message: 'Invoice downloaded successfully!',
                    position: 'topCenter',
                    class: 'custom-toast',
                    timeout: 3000,
                });
            } else {
                const pdfURL = URL.createObjectURL(pdfBlob);
                window.open(pdfURL, '_blank');

                iziToast.success({
                    title: 'Success',
                    message: 'Invoice opened successfully!',
                    position: 'topCenter',
                    class: 'custom-toast',
                    timeout: 3000,
                });
            }
        } else {
            console.error('Response is not a valid Invoice');
            iziToast.error({
                title: 'Error',
                message: 'Failed to generate Invoice',
                position: 'topCenter',
                class: 'custom-toast',
                timeout: 3000,
            });
        }
    } else {
        console.error('Failed to generate Invoice');
        iziToast.error({
            title: 'Error',
            message: 'Failed to generate Invoice',
            position: 'topCenter',
            class: 'custom-toast',
            timeout: 3000,
        });
    }
});

document.getElementById('btnCalendar').addEventListener('click', async () => {
    const eventDetails = {
        title: "11th Annual Big Data & Analytics Summit Canada",
        description: "The 11th Annual Big Data & Analytics Summit Canada 2025 features big data and analytics experts from top North American brands.",
        location: "Sheraton Toronto Airport Hotel & Conference Centre",
        start: [2025, 6, 4, 7, 30],
        end: [2025, 6, 5, 17, 0]
    };

    const fileName = "BigData_Summit_Canada_2025";

    try {
        const response = await fetch('https://checkout-beige.vercel.app/api/add-to-calendar', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ eventDetails, fileName }),
        });

        if (!response.ok) {
            throw new Error('Failed to generate ICS file');
        }

        const blob = await response.blob();

        const url = window.URL.createObjectURL(blob);

        const link = document.createElement('a');
        link.href = url;
        link.download = fileName + '.ics';
        link.click();

        window.URL.revokeObjectURL(url);
    } catch (error) {
        console.error('Error:', error.message);
    }
});


function showLoadingInvoiceModal() {
    const modal = new bootstrap.Modal(document.getElementById('loadingInvoiceModal'));
    modal.show();
    return modal;
}

function hideLoadingInvoiceModal(modalInstance) {
    modalInstance.hide();
}